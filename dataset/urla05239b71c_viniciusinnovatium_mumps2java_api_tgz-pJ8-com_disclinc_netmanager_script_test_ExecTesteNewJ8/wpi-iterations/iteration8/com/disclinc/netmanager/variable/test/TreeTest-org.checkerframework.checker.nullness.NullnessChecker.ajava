package com.disclinc.netmanager.variable.test;

import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;
import br.com.innovatium.mumps2java.datastructure.Tree;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TreeTest {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Tree tree;

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.tree" })
    @org.checkerframework.dataflow.qual.Impure
    public void init() {
        tree = new Tree();
        tree.set(new Object[] { "carro" }, 65);
        tree.set(new Object[] { "carro", "esportivo" }, 99);
        tree.set(new Object[] { "carro", "esportivo", "amarelo" }, 76);
        tree.set(new Object[] { "contrato" }, 66);
        tree.set(new Object[] { "contrato", "transporte" }, 123);
        tree.set(new Object[] { "contrato", "transporte", "publico" }, 88);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.tree" })
    @org.checkerframework.dataflow.qual.Impure
    public void testRecoveringVariable() {
        assertEquals(65, tree.get(new Object[] { "carro" }));
        assertEquals(99, tree.get(new Object[] { "carro", "esportivo" }));
        assertEquals(76, tree.get(new Object[] { "carro", "esportivo", "amarelo" }));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.tree" })
    @org.checkerframework.dataflow.qual.Impure
    public void testRemoveNodes() {
        tree.kill("carro");
        assertEquals("The node should not be into the tree after killing node method", null, tree.get("carro"));
        assertEquals("The node should not be into the tree after killing node method", null, tree.get("carro", "esportivo"));
        assertEquals("The node should not be into the tree after killing node method", null, tree.get("carro", "esportivo", "amarelo"));
        assertEquals("The node should be into the tree because he was not removed from the tree", 66, tree.get("contrato"));
        assertEquals("The node should be into the tree because he was not removed from the tree", 123, tree.get("contrato", "transporte"));
        assertEquals("The node should be into the tree because he was not removed from the tree", 88, tree.get("contrato", "transporte", "publico"));
    }
}
