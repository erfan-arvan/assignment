package br.com.innovatium.mumps2java.datastructure.util;

import mLibrary.mFncUtil;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public final class DataStructureUtil {

    public final static  String DELIMITER = "~";

    @org.checkerframework.dataflow.qual.SideEffectFree
    private DataStructureUtil() {
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  Object  [] concat( Object  [] first,  Object  [] second) {
        return concat(first, second, first.length, 0);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  Object  [] concatSinceLast( Object  [] first,  Object  [] second) {
        return concat(first, second, first.length - 1, 0);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  Object  [] concat( Object  [] dest,  Object orig) {
        return concat(dest, new Object[] { orig });
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  String generateKey( Object  [] subs) {
        int delimiterOccurece = subs.length - 1;
        return generateKey(0, subs.length, delimiterOccurece, subs);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  String generateKeyOfParent( Object  [] subs) {
        int end = subs.length - 1;
        int delimiterOccurece = end - 1;
        return generateKey(0, end, delimiterOccurece, subs);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  String generateKeyWithoutVarName( Object  [] subs) {
        int delimiterOccurece = subs.length - 2;
        if (subs.length == 1) {
            return " ";
        }
        return generateKey(1, subs.length, delimiterOccurece, subs);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  String generateKeyToLikeQuery( Object  [] subs) {
        // Like query must remove the first subscript which means the table name
        // and remove the last subscript to fetch all children of that key.
        int delimiterOccurece = subs.length - 1;
        return generateKey(1, subs.length - 1, delimiterOccurece, subs);
    }

    @org.checkerframework.dataflow.qual.Impure
    private static  String generateKey(  int start,   int end,   int delimiterOccurence,  Object ... subs) {
        if (subs == null || subs.length == 0) {
            return " ";
        }
        final StringBuilder builder = new StringBuilder();
        for (int i = start; i < end; i++) {
            builder.append(mFncUtil.toString(subs[i]));
            if (delimiterOccurence-- > 0) {
                builder.append(DELIMITER);
            }
        }
        return builder.toString();
    }

    @org.checkerframework.dataflow.qual.Pure
    public static  Object  [] generateSubs( String key) {
        if (key == null) {
            return null;
        }
        return key.split(DELIMITER);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static  Object  [] generateSubs( String tableName,  String key) {
        return generateSubs(new StringBuilder("^").append(tableName).append(DELIMITER).append(key).toString());
    }

    @org.checkerframework.dataflow.qual.Pure
    public static  String generateTableName( Object ... subs) {
        return subs[0].toString().replace("^", "");
    }

    @org.checkerframework.dataflow.qual.Impure
    private static  Object  [] concat( Object  [] first,  Object  [] second,   int lastIndexOfFirst,   int startIndexOfSecond) {
        Object[] copy = new Object[lastIndexOfFirst + second.length];
        for (int i = 0; i < lastIndexOfFirst; i++) {
            copy[i] = first[i];
        }
        for (int i = startIndexOfSecond; i < second.length; i++) {
            copy[i + lastIndexOfFirst] = second[i];
        }
        return copy;
    }
}
