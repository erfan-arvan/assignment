package net.slreynolds.ds.model;

import static org.junit.Assert.*;
import java.io.File;
import java.util.HashMap;
import net.slreynolds.ds.ObjectSaver;
import net.slreynolds.ds.export.ExporterOptions;
import net.slreynolds.ds.export.GraphVizExporter;
import net.slreynolds.ds.export.SimpleGraphVizExporter;
import net.slreynolds.ds.model.Graph;
import net.slreynolds.ds.model.GraphPoint;
import net.slreynolds.ds.model.Named;
import org.junit.Test;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class TestArrays {

    public static class C {

        private final   int _i;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public C(  int i) {
            _i = i;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testObjectArray() {
        C c0 = new C(0);
        C c1 = new C(1);
        C c2 = new C(2);
        C[] myobjarray = new C[] { c0, c1, c2 };
        ExporterStub exporter = new ExporterStub();
        ObjectSaver stubSaver = new ObjectSaver(exporter);
        HashMap<String, Object> options = new HashMap<String, Object>();
        stubSaver.save(new Object[] { myobjarray }, new String[] { "myobjarray" }, options);
        Graph g = exporter.getGraph();
        assertEquals("num graph points", 5, g.getGraphPoints().size());
        GraphPoint gp = g.getPrimaryGraphPoint();
        assertTrue("primary point isa symbol", gp.hasAttr(Named.SYMBOL));
        assertTrue("primary point isa symbol", (Boolean) gp.getAttr(Named.SYMBOL));
        assertEquals("primary has one link", 1, gp.getNeighbors().size());
        String dir = "test_output/";
        ObjectSaver gvizSaver = new ObjectSaver(new GraphVizExporter());
        new File(dir + "myobjarray.dot").delete();
        options.put(ExporterOptions.OUTPUT_PATH, dir + "myobjarray.dot");
        gvizSaver.save(new Object[] { myobjarray }, new String[] { "myobjarray" }, options);
        ObjectSaver simpleGvizSaver = new ObjectSaver(new SimpleGraphVizExporter());
        new File(dir + "myobjarray_simple.dot").delete();
        options.put(ExporterOptions.OUTPUT_PATH, dir + "myobjarray_simple.dot");
        simpleGvizSaver.save(new Object[] { myobjarray }, new String[] { "myobjarray" }, options);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testPrimitiveArray() {
        int[] myintarray = new int[] { 0, 1, 2 };
        ExporterStub exporter = new ExporterStub();
        ObjectSaver stubSaver = new ObjectSaver(exporter);
        HashMap<String, Object> options = new HashMap<String, Object>();
        stubSaver.save(new Object[] { myintarray }, new String[] { "myintarray" }, options);
        Graph g = exporter.getGraph();
        assertEquals("num graph points", 2, g.getGraphPoints().size());
        GraphPoint gp = g.getPrimaryGraphPoint();
        assertTrue("primary point isa symbol", gp.hasAttr(Named.SYMBOL));
        assertTrue("primary point isa symbol", (Boolean) gp.getAttr(Named.SYMBOL));
        assertEquals("primary has one link", 1, gp.getNeighbors().size());
        String dir = "test_output/";
        ObjectSaver gvizSaver = new ObjectSaver(new GraphVizExporter());
        new File(dir + "myintarray.dot").delete();
        options.put(ExporterOptions.OUTPUT_PATH, dir + "myintarray.dot");
        gvizSaver.save(new Object[] { myintarray }, new String[] { "myintarray" }, options);
        ObjectSaver simpleGvizSaver = new ObjectSaver(new SimpleGraphVizExporter());
        new File(dir + "myintarray_simple.dot").delete();
        options.put(ExporterOptions.OUTPUT_PATH, dir + "myintarray_simple.dot");
        simpleGvizSaver.save(new Object[] { myintarray }, new String[] { "myintarray" }, options);
    }

    public static abstract class DoubleArrayTestConfig {

        public final   boolean addInlineOption;

        public final   boolean valueOfInLineOption;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public DoubleArrayTestConfig(  boolean addit,   boolean value) {
            addInlineOption = addit;
            valueOfInLineOption = value;
        }

        @org.checkerframework.dataflow.qual.Pure
        abstract   int getNumGraphPoints( DoubleArrayTestConfig this);

        @org.checkerframework.dataflow.qual.Pure
        abstract  String getNameFragment( DoubleArrayTestConfig this);
    }

    public static class DefaultDouble extends DoubleArrayTestConfig {

        @org.checkerframework.dataflow.qual.SideEffectFree
        public DefaultDouble() {
            super(false, false);
        }

        @org.checkerframework.dataflow.qual.Pure
          int getNumGraphPoints( DefaultDouble this) {
            return 5;
        }

        @org.checkerframework.dataflow.qual.Pure
         String getNameFragment( DefaultDouble this) {
            return "default";
        }
    }

    public static class NoInline extends DoubleArrayTestConfig {

        @org.checkerframework.dataflow.qual.SideEffectFree
        public NoInline() {
            super(true, false);
        }

        @org.checkerframework.dataflow.qual.Pure
          int getNumGraphPoints( NoInline this) {
            return 5;
        }

        @org.checkerframework.dataflow.qual.Pure
         String getNameFragment( NoInline this) {
            return "noinline";
        }
    }

    public static class DoInline extends DoubleArrayTestConfig {

        @org.checkerframework.dataflow.qual.SideEffectFree
        public DoInline() {
            super(true, true);
        }

        @org.checkerframework.dataflow.qual.Pure
          int getNumGraphPoints( DoInline this) {
            return 2;
        }

        @org.checkerframework.dataflow.qual.Pure
         String getNameFragment( DoInline this) {
            return "doinline";
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testDoubleArray() {
        assertEquals(false, BuilderOptions.DEFAULT_INLINE_NUMBERS);
        checkDoubleArray(new DefaultDouble());
        checkDoubleArray(new NoInline());
        checkDoubleArray(new DoInline());
    }

    @org.checkerframework.dataflow.qual.Impure
    private void checkDoubleArray( TestArrays this,  DoubleArrayTestConfig testConfig) {
        final String name = "myDoubleArray_" + testConfig.getNameFragment();
        Double[] myDoubleArray = new Double[] { 0.0, 1.0, 2.0 };
        ExporterStub exporter = new ExporterStub();
        ObjectSaver stubSaver = new ObjectSaver(exporter);
        HashMap<String, Object> options = new HashMap<String, Object>();
        if (testConfig.addInlineOption) {
            options.put(BuilderOptions.INLINE_NUMBERS, testConfig.valueOfInLineOption);
        }
        stubSaver.save(new Object[] { myDoubleArray }, new String[] { name }, options);
        Graph g = exporter.getGraph();
        assertEquals("num graph points", testConfig.getNumGraphPoints(), g.getGraphPoints().size());
        GraphPoint gp = g.getPrimaryGraphPoint();
        assertTrue("primary point isa symbol", gp.hasAttr(Named.SYMBOL));
        assertTrue("primary point isa symbol", (Boolean) gp.getAttr(Named.SYMBOL));
        assertEquals("primary has one link", 1, gp.getNeighbors().size());
        String dir = "test_output/";
        ObjectSaver gvizSaver = new ObjectSaver(new GraphVizExporter());
        new File(dir + name + ".dot").delete();
        options.put(ExporterOptions.OUTPUT_PATH, dir + name + ".dot");
        gvizSaver.save(new Object[] { myDoubleArray }, new String[] { name }, options);
        ObjectSaver simpleGvizSaver = new ObjectSaver(new SimpleGraphVizExporter());
        new File(dir + name + "_simple.dot").delete();
        options.put(ExporterOptions.OUTPUT_PATH, dir + name + "_simple.dot");
        simpleGvizSaver.save(new Object[] { myDoubleArray }, new String[] { name }, options);
    }
}
