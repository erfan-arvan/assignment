/*     */
package org.ands.rifcs.base;

/*     */
/*     */
import java.util.ArrayList;
/*     */
import java.util.List;
/*     */
import org.w3c.dom.Document;
/*     */
import org.w3c.dom.Element;
/*     */
import org.w3c.dom.Node;
/*     */
import org.w3c.dom.NodeList;

/*     */
/*     */
/*     */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class ROElement {

    /*     */
    /*  42 */
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Element e = null;

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    protected ROElement(Node n) throws /*     */
    RIFCSException /*     */
    {
        /*  55 */
        if (n == null) /*     */
        {
            /*  57 */
            throw new RIFCSException("Null Node passed to constructor");
            /*     */
        }
        /*     */
        /*  60 */
        if (!(n instanceof Element)) /*     */
        {
            /*  62 */
            throw new RIFCSException("Node of type Element required in constructor");
            /*     */
        }
        /*     */
        /*  65 */
        String name = n.getNodeName();
        /*     */
        /*  67 */
        if ((!name.equals("activity")) && /*  68 */
        (!name.equals("collection")) && /*  69 */
        (!name.equals("party")) && /*  70 */
        (!name.equals("service"))) /*     */
        {
            /*  72 */
            throw new RIFCSException("Invalid regsitry object type: " + name);
            /*     */
        }
        /*     */
        /*  76 */
        this.e = ((Element) n);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAttributeValue(String name) /*     */
    {
        /*  92 */
        return this.e.getAttribute(name);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    protected void setAttributeValue(String name, String value) /*     */
    {
        /* 108 */
        this.e.setAttribute(name, value);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    protected void setAttributeValueNS(String ns, String name, String value) /*     */
    {
        /* 126 */
        this.e.setAttributeNS(ns, name, value);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAttributeValue(String ns, String localName) /*     */
    {
        /* 146 */
        return this.e.getAttributeNS(ns, localName);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getText() /*     */
    {
        /* 158 */
        return this.e.getTextContent();
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    protected void setText(String value) /*     */
    {
        /* 170 */
        this.e.setTextContent(value);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NodeList getElements(String localName) /*     */
    {
        /* 185 */
        return this.e.getElementsByTagNameNS("http://ands.org.au/standards/rif-cs/registryObjects", localName);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Node> getChildElements(String localName) /*     */
    {
        /* 201 */
        NodeList nl = this.e.getChildNodes();
        /* 202 */
        List l = new ArrayList();
        /* 203 */
        for (int i = 0; i < nl.getLength(); i++) /*     */
        {
            /* 205 */
            if ((nl.item(i).getNodeType() == 1) && /* 206 */
            (nl.item(i).getLocalName().equals(localName))) /*     */
            {
                /* 208 */
                l.add(nl.item(i));
                /*     */
            }
            /*     */
        }
        /*     */
        /* 212 */
        return l;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Element getElement() /*     */
    {
        /* 224 */
        return this.e;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Element newElement(String elementName) /*     */
    {
        /* 237 */
        return getElement().getOwnerDocument().createElementNS("http://ands.org.au/standards/rif-cs/registryObjects", elementName);
        /*     */
    }
}
/* Location:           /Users/przemyslaw/Downloads/rifcs-api-1.3.0.jar
 * Qualified Name:     org.ands.rifcs.base.ROElement
 * JD-Core Version:    0.6.2
 */
