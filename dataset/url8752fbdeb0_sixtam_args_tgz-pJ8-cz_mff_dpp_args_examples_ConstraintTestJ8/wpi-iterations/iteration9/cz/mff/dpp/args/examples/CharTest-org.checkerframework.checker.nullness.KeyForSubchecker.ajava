package cz.mff.dpp.args.examples;

import cz.mff.dpp.args.Constraint;
import cz.mff.dpp.args.Logger;
import cz.mff.dpp.args.Option;
import cz.mff.dpp.args.Parser;

/**
 * Tests char and Character, use of comparator.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class CharTest {

    public static final class Handler {

        @org.checkerframework.dataflow.qual.SideEffectFree
        private Handler() {
        }

        @org.checkerframework.dataflow.qual.Impure
        public static   int compare(char x, char y) {
            return Character.valueOf(x).compareTo(y);
        }
    }

    static class CharTestOptions {

        public char c;

        Character character;

        @org.checkerframework.dataflow.qual.Impure
        public void charSetter(char c) {
            charFromSetter = c;
        }

        public   char charFromSetter;

        @org.checkerframework.dataflow.qual.Impure
        public void charSetter(Character c) {
            characterFromSetter = c;
        }

        public  Character characterFromSetter;

        char ch;
    }

    /**
     * @param args
     */
    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) throws Exception {
        CharTestOptions charOptions = new CharTestOptions();
        Parser parser = new Parser(charOptions);
        if (args.length == 0) {
            String[] localArgs = { "-c", "e", "--character", "C", "--charSetter", "--characterSetter", "Q", "--char-constraint=b" };
            parser.parse(localArgs);
        } else {
            parser.parse(args);
        }
        System.out.println("char: " + charOptions.c);
        System.out.println("Character: " + charOptions.character);
        System.out.println("char from setter: " + charOptions.charFromSetter);
        System.out.println("Character from setter: " + charOptions.characterFromSetter);
        if (args.length == 0) {
            assert (charOptions.c == 'e');
            assert (charOptions.character.charValue() == 'C');
            assert (charOptions.charFromSetter == 'b');
            assert (charOptions.characterFromSetter.charValue() == 'Q');
        }
    }
}
