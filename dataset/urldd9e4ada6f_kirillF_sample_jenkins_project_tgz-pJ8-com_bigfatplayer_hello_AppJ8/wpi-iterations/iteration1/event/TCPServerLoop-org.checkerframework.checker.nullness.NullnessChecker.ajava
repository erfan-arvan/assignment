package event;

import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.SelectionKey;
import java.net.SocketAddress;
import java.util.Iterator;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TCPServerLoop extends TCPClientLoop {

    @org.checkerframework.dataflow.qual.Impure
    public TCPServerLoop() {
        super();
    }

    /**
     * IOException
     * java.nio.channels.ClosedChannelException
     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.dataflow.qual.Impure
    public void createTCPServer(final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable TCPServer cb, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketAddress sa) {
        try {
            final ServerSocketChannel ssc = ServerSocketChannel.open();
            ssc.configureBlocking(false);
            ssc.socket().bind(sa);
            cb.onConnect(this, ssc);
            if (this.isLoopThread()) {
                ssc.register(this.selector, SelectionKey.OP_ACCEPT, cb);
            } else {
                this.addTimeout(new Callback.Timeout() {

                    @org.checkerframework.dataflow.qual.Impure
                    public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop l) {
                        try {
                            ssc.register(l.selector, SelectionKey.OP_ACCEPT, cb);
                        } catch (java.nio.channels.ClosedChannelException cce) {
                            cb.onError((TCPServerLoop) l, ssc, cce);
                        }
                    }
                });
            }
        } catch (java.io.IOException ioe) {
            cb.onError(this, ioe);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPServerLoop this) {
        assert this.isLoopThread();
        if (!this.isRunning()) {
            return;
        }
        Iterator<SelectionKey> keys = this.selector.selectedKeys().iterator();
        SelectionKey key;
        while (keys.hasNext()) {
            key = keys.next();
            if (key.isValid() && key.isAcceptable()) {
                keys.remove();
                handleAccept(key);
            }
        }
        super.go();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void handleAccept(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SelectionKey key) {
        assert this.isLoopThread();
        assert key.isAcceptable();
        ServerSocketChannel ssc = (ServerSocketChannel) key.channel();
        Callback.TCPServer cb = (Callback.TCPServer) key.attachment();
        SocketChannel sc = null;
        try {
            sc = ssc.accept();
        } catch (java.io.IOException ioe) {
            cb.onError(this, ssc, ioe);
            return;
        }
        cb.onAccept(this, ssc, sc);
    }
}
