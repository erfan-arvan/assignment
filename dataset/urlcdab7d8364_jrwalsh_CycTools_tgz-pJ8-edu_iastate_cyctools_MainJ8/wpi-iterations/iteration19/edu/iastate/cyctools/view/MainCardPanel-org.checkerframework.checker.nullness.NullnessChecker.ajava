package edu.iastate.cyctools.view;

import java.beans.PropertyChangeEvent;
import edu.iastate.cyctools.DefaultController;
import edu.iastate.cyctools.InternalStateModel.State;
import edu.iastate.cyctools.externalSourceCode.AbstractViewPanel;
import java.awt.CardLayout;
import java.awt.Dimension;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class MainCardPanel extends AbstractViewPanel {

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DefaultController controller;

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String loginCard = "Login";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String selectCard = "Select";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String frameBrowseCard = "FrameBrowse";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String exportCard = "Export";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String searchCard = "Search";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String structureExportCard = "Structure Export";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String databaseCompareCard = "Database Compare";

    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String loadCard = "Load";

    /**
     * Create the frame.
     * @param controller
     */
    @org.checkerframework.dataflow.qual.Impure
    public MainCardPanel(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DefaultController controller) {
        this.controller = controller;
        initComponents();
        localInitialization();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void localInitialization() {
        //Add self as property change event listener of the controller
        controller.addView(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void initComponents() {
        this.setLayout(new CardLayout(0, 0));
    }

    @org.checkerframework.dataflow.qual.Impure
    public void modelPropertyChange(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MainCardPanel this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(DefaultController.BROWSER_STATE_PROPERTY) && evt.getNewValue() != null) {
            if (evt.getNewValue() == State.NOT_CONNECTED) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.loginCard);
            } else if (evt.getNewValue() == State.SHOW_MAIN_SCREEN) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.selectCard);
                controller.setDisconnectActionEnabled(true);
            } else if (evt.getNewValue() == State.SHOW_FRAMEBROWSE) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.frameBrowseCard);
            } else if (evt.getNewValue() == State.SHOW_EXPORT) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.exportCard);
            } else if (evt.getNewValue() == State.SHOW_SEARCH) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.searchCard);
            } else if (evt.getNewValue() == State.SHOW_STRUCTURE_EXPORT) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.structureExportCard);
            } else if (evt.getNewValue() == State.SHOW_DATABASE_COMPARE) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.databaseCompareCard);
            } else if (evt.getNewValue() == State.SHOW_IMPORT) {
                CardLayout cl = (CardLayout) (this.getLayout());
                cl.show(this, MainCardPanel.loadCard);
            }
        }
    }
}
