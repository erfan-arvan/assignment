import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import java.util.ArrayList;

// a single word, many urls and each url has a rank
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SearchResponse {

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String word;

    // Java, where me tuples, bro!?
    @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull ArrayList<Url> urls;

    @org.checkerframework.dataflow.qual.Impure
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SearchResponse fromResponseJson(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JSONObject json) {
        SearchResponse response = new SearchResponse();
        response.word = (String) json.get("word");
        JSONArray urls = (JSONArray) json.get("response");
        for (Object row : urls) {
            JSONObject url = (JSONObject) row;
            String name = (String) url.get("url");
            int rank = Integer.valueOf((String) url.get("rank"));
            response.urls.add(new Url(name, rank));
        }
        return response;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SearchResponse fromIndexJson(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JSONObject json) {
        SearchResponse index = new SearchResponse();
        index.word = (String) json.get("keyword");
        JSONArray links = (JSONArray) json.get("link");
        for (int i = 0; i < links.size(); i++) {
            index.urls.add(new Url((String) links.get(i), 1));
        }
        return index;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.urls" })
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JSONObject toJson() {
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("word", word);
        JSONArray jsonUrls = new JSONArray();
        for (Url url : urls) {
            JSONObject curr = new JSONObject();
            curr.put("url", url.url);
            curr.put("rank", String.valueOf(url.rank));
            jsonUrls.add(curr);
        }
        jsonObj.put("response", jsonUrls);
        return jsonObj;
    }
}
