package br.com.innovatium.mumps2java.datastructure;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil;
import br.com.innovatium.mumps2java.todo.TODO;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class Tree extends Node {

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int currentStackLevel = 0;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull StackNode stack;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<String, Node> keyValue = new HashMap<String, Node>(100);

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull KillOperationOverNodes killSubnodesOperation = new KillOperationOverNodes();

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AddOnTreeOperationOverNodes addSubnodesOperation = new AddOnTreeOperationOverNodes();

    private @org.checkerframework.checker.initialization.qual.UnderInitialization(br.com.innovatium.mumps2java.datastructure.Tree.MergeOperationOverNodes.class) @org.checkerframework.checker.nullness.qual.NonNull MergeOperationOverNodes mergeSubnodesOperation = new MergeOperationOverNodes(this);

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Tree() {
        // We adopted this subscript to the tree because no one mumps variable
        // can be declared about this symbol.
        super(new Object[] { "@" }, null, "@");
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Impure
    public void stacking(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... variables) {
        if (stack == null) {
            stack = new StackNode();
        }
        currentStackLevel++;
        Node node = null;
        /*
		 * Iterating over variable names collection. Here we suppose the
		 * variable name is the first subscript of the array.
		 */
        for (Object variableName : variables) {
            node = findNode(variableName.toString());
            // Avoid some variables which does not exist into the tree.
            if (node != null) {
                node.setStackLevel(currentStackLevel);
                stack.push(node);
                kill(node);
            }
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean contains(Object[] subs) {
        return findNode(subs) != null;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Impure
    public void unstacking() {
        if (stack == null) {
            stack = new StackNode();
        }
        final List<Node> stackedNodes = stack.pull(currentStackLevel);
        if (stackedNodes != null && !stackedNodes.isEmpty()) {
            for (Node stackedNode : stackedNodes) {
                /*
				 * First of all, we are to looking for some node with the same
				 * subscritps of the stacked node, then remove it from the tree
				 * and add the stacked node there. At second, we suppose that
				 * each stacked variable has the key as they variable name, for
				 * instance: subs = [%x] has the name variable as %x, then, it
				 * is identical to its generated key.
				 */
                Node nodeOnTheTree = findNode(stackedNode.getKey());
                replaceNode(stackedNode, nodeOnTheTree);
                stackedNode.setStackLevel(0);
            }
        }
        currentStackLevel--;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Impure
    public void stackingExcept(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... variables) {
        if (stack == null) {
            stack = new StackNode();
        }
        currentStackLevel++;
        List<Node> nodes = findSubnodeExcepts(variables);
        if (nodes != null) {
            for (Node node : nodes) {
                node.setStackLevel(currentStackLevel);
                stack.push(node);
                kill(node);
            }
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int data(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs) {
        Node node = findNode(subs);
        if (node == null) {
            return 0;
        }
        int cod = -1;
        boolean hasValue = node.getValue() != null;
        boolean hasChildPopulated = hasPopulatedSubnode(node);
        if (!hasValue && !hasChildPopulated) {
            cod = 0;
        } else if (hasValue && !hasChildPopulated) {
            cod = 1;
        } else if (!hasValue && hasChildPopulated) {
            cod = 10;
        } else if (hasValue && hasChildPopulated) {
            cod = 11;
        }
        return cod;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void set(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable [] subs, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object value) {
        setting(subs, value);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node kill(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... subs) {
        Node node = findNode(subs);
        kill(node);
        return node;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object order(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int direction) {
        // Here we are treating the case when we order function is called with
        // empty subscript. At this moment we have to return the first tree
        // subnode.
        if (subs.length == 1 && "".equals(subs[0])) {
            return this.hasSubnodes() ? this.getSubnode().getSubscript() : "";
        }
        Object lastSubscript = subs[subs.length - 1];
        Object subscript = "";
        final boolean isEmptyLastSubs = lastSubscript == null || lastSubscript.toString().length() == 0;
        final boolean isFoward = direction >= 1;
        // Condition to return to first element on list of subnodes.
        if (isEmptyLastSubs) {
            subs = Arrays.copyOf(subs, subs.length - 1);
        }
        final Node node = findNode(subs);
        if (isEmptyLastSubs && isFoward && node != null) {
            subscript = node.hasSubnodes() ? node.getSubnode().getSubscript() : "";
        } else if (isEmptyLastSubs && !isFoward && node != null) {
            subscript = node.hasSubnodes() ? findLastNode(node.getSubnode()).getSubscript() : "";
        } else if (isFoward && node != null) {
            subscript = node.hasNext() ? node.getNext().getSubscript() : "";
        } else if (node != null) {
            subscript = node.hasPrevious() ? node.getPrevious().getSubscript() : "";
        }
        return subscript;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String generateKey(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... subs) {
        return DataStructureUtil.generateKey(subs);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean hasPopulatedSubnode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
        boolean isPreenchido = false;
        if (node.hasSubnodes()) {
            for (Node subnode : node.getFirstLevelSubnodes()) {
                if (subnode.getValue() != null) {
                    isPreenchido = true;
                    break;
                }
                isPreenchido = hasPopulatedSubnode(subnode);
                if (isPreenchido) {
                    return true;
                }
            }
        }
        return isPreenchido;
    }

    // The method which returns the sub nodes of the node should be enhanced.
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean hasPopulatedSubnode(Node node,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean found) {
        if (!found && node.hasSubnodes()) {
            Node subnode = node.getSubnode();
            if (subnode.getValue() != null) {
                found = true;
            }
            found = hasPopulatedSubnode(subnode, found);
        } else if (!found && node.isLeaf() && node.getValue() != null) {
            found = true;
        } else if (!found && node.hasNext()) {
            found = hasPopulatedSubnode(node.getNext(), found);
        }
        return found;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node findNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs) {
        return findNodeByKey(generateKey(subs));
    }

    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.stack" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node findNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String variableName) {
        return findNodeByKey(variableName);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object get(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... subs) {
        Node node = findNode(subs);
        if (node != null) {
            return node.getValue();
        }
        return null;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String dump() {
        StringBuilder string = new StringBuilder();
        operateOverSubnodes(this, new DumpOperationOverNodes(string));
        return string.toString();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isEmpty() {
        return !this.hasSubnodes();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void merge(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] destSubs, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] origSubs) {
        Node origNode = findNode(origSubs);
        Node destNode = findNode(destSubs);
        if (destNode == null) {
            destNode = setting(destSubs, null);
        }
        if (origNode == null) {
            origNode = setting(origSubs, null);
        }
        if (origNode.getValue() != null) {
            destNode.setValue(origNode.getValue());
        }
        if (origNode.hasSubnodes()) {
            mergeSubnodesOperation.set(destSubs, origSubs);
            operateOverSubnodes(origNode.getSubnode(), mergeSubnodesOperation);
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object order(Object... subs) {
        return order(subs, 1);
    }

    /*
	 * Generic method which be reused by anothers when search subnodes is need.
	 * This may occur when we are dumping the tree and kill all subnodes of some
	 * node, for instance.
	 */
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private void operateOverSubnodes(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node node, @org.checkerframework.checker.initialization.qual.UnknownInitialization(br.com.innovatium.mumps2java.datastructure.Tree.MergeOperationOverNodes.class) @org.checkerframework.checker.nullness.qual.NonNull OperationOverNodes operation) {
        if (node != null) {
            operation.operate(node);
            Node next = node.getSubnode();
            while (next != null) {
                operateOverSubnodes(next, operation);
                next = next.getNext();
            }
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isNotPresentOnTree(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node node) {
        return node == null || !node.hasParent();
    }

    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.stack" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable List<Node> findSubnodeExcepts(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... subs) {
        if (subs == null) {
            return null;
        }
        List<Node> variables = this.getFirstLevelSubnodes();
        if (variables == null || variables.isEmpty()) {
            return null;
        }
        List<Node> list = null;
        subnodes: for (Node node : variables) {
            for (int i = 0; i < subs.length; i++) {
                if (subs[i] != null && subs[i].equals(node.getSubscriptAsString())) {
                    continue subnodes;
                }
            }
            if (list == null) {
                list = new ArrayList<Node>(30);
            }
            list.add(node);
        }
        return list;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node setting(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable [] subs, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object value) {
        if (subs == null || subs.length == 0) {
            return null;
        }
        Node node = findNode(subs);
        if (node == null) {
            node = generateNode(subs);
        }
        node.setValue(value);
        return node;
    }

    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.stack" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Impure
    private void replaceNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node stackedNode, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node currentNode) {
        if (currentNode == null) {
            addSubnode(stackedNode);
        } else {
            stackedNode.setNext(currentNode.getNext());
            stackedNode.setPrevious(currentNode.getPrevious());
            stackedNode.setParent(currentNode.getParent());
            if (currentNode.hasPrevious()) {
                currentNode.getPrevious().setNext(stackedNode);
            }
            if (currentNode.hasNext()) {
                currentNode.getNext().setPrevious(stackedNode);
            }
            currentNode.cancelReferences();
        }
        addAllSubnodes(stackedNode);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private void kill(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node node) {
        if (isNotPresentOnTree(node)) {
            return;
        }
        if (node.isFirstSubnode()) {
            node.getParent().setSubnode(node.getNext());
        } else {
            node.getPrevious().setNext(node.getNext());
        }
        if (node.getNext() != null) {
            node.getNext().setPrevious(node.getPrevious());
        }
        node.cancelReferences();
        // We have to remove from the map all subnodes references, other wise,
        // some another routine can recover them throught get(subs) method.
        killAllSubnodes(node);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private void killAllSubnodes(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
        operateOverSubnodes(node, killSubnodesOperation);
    }

    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.stack" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.stack" })
    @org.checkerframework.dataflow.qual.Impure
    private void addAllSubnodes(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
        operateOverSubnodes(node, addSubnodesOperation);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node findLastNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node node) {
        while (node.hasNext()) {
            node = node.getNext();
        }
        return node;
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node generateNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs) {
        return generateNode(this, subs, 0);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node generateNode(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node parent, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index) {
        index = index + 1;
        final Object[] subnodeArray = Arrays.copyOf(subs, index);
        // Node nodefound = findSubnode(parent, subnodeArray);
        Node nodefound = findNode(subnodeArray);
        boolean exist = nodefound != null;
        if (!exist) {
            nodefound = new Node(subnodeArray, generateKey(subnodeArray));
            parent.addSubnode(nodefound);
            keyValue.put(nodefound.getKey(), nodefound);
        }
        if (index < subs.length) {
            nodefound = generateNode(nodefound, subs, index);
        }
        if (nodefound.getParent() == null) {
            throw new IllegalStateException("Ferrou..." + nodefound);
        }
        return nodefound;
    }

    /**
     * This class was created to reuse subnodes searching method. Dumping the
     * tree and kill subnodes methods have the same implementation.
     *
     * @author vinicius
     */
    private interface OperationOverNodes {

        @org.checkerframework.dataflow.qual.Impure
        void operate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node);
    }

    private final class KillOperationOverNodes implements OperationOverNodes {

        @org.checkerframework.dataflow.qual.Impure
        public void operate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull KillOperationOverNodes this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
            keyValue.remove(node.getKey());
        }
    }

    private final class AddOnTreeOperationOverNodes implements OperationOverNodes {

        @org.checkerframework.dataflow.qual.Impure
        public void operate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AddOnTreeOperationOverNodes this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
            keyValue.put(node.getKey(), node);
        }
    }

    private final class MergeOperationOverNodes implements OperationOverNodes {

        private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull [] dest;

        private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull [] orig;

        private final @org.checkerframework.checker.initialization.qual.UnderInitialization(br.com.innovatium.mumps2java.datastructure.Node.class) @org.checkerframework.checker.nullness.qual.NonNull Tree tree;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public MergeOperationOverNodes(@org.checkerframework.checker.initialization.qual.UnderInitialization(br.com.innovatium.mumps2java.datastructure.Node.class) @org.checkerframework.checker.nullness.qual.NonNull Tree tree) {
            this.tree = tree;
        }

        @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.dest" })
        @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.orig" })
        @org.checkerframework.dataflow.qual.Impure
        public void set(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] dest, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] orig) {
            this.dest = dest;
            this.orig = orig;
        }

        @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.dest" })
        @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.orig" })
        @org.checkerframework.dataflow.qual.Impure
        public void operate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MergeOperationOverNodes this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
            Object[] concatSubs = null;
            Object subnodeValue = node.getValue();
            concatSubs = DataStructureUtil.concat(dest, node.getSubs(orig.length));
            Node destNode = findNode(concatSubs);
            if (destNode == null) {
                tree.set(concatSubs, subnodeValue);
            } else if (subnodeValue != null) {
                destNode.setValue(subnodeValue);
            }
        }
    }

    private final class DumpOperationOverNodes implements OperationOverNodes {

        private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull StringBuilder dump;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public DumpOperationOverNodes(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull StringBuilder dump) {
            this.dump = dump;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void operate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DumpOperationOverNodes this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node node) {
            dump.append(node).append("\n");
        }
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.stack" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node findNodeByKey(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String key) {
        return keyValue.get(key);
    }
}
