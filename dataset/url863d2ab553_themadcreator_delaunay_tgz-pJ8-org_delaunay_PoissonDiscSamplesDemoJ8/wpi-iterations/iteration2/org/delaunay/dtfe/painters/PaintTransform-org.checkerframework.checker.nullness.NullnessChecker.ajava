package org.delaunay.dtfe.painters;

import java.awt.Point;
import java.awt.Rectangle;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.List;
import org.delaunay.model.Vector;
import com.google.common.base.Function;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class PaintTransform {

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int width;

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int height;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Rectangle2D dtfeWindow;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public PaintTransform( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int width,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int height) {
        this(width, height, new Rectangle(0, 0, width, height));
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public PaintTransform( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int width,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int height, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Rectangle2D dtfeWindow) {
        this.width = width;
        this.height = height;
        this.dtfeWindow = dtfeWindow;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<PaintTransform> createSlices( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int slices) {
        int heightPerSlice = height / slices;
        List<PaintTransform> transforms = Lists.newArrayList();
        for (int i = 0; i < slices; i++) {
            transforms.add(new PaintTransform(width, heightPerSlice, new Rectangle2D.Double(dtfeWindow.getMinX(), dtfeWindow.getMinY() + i * dtfeWindow.getHeight() / slices, dtfeWindow.getWidth(), dtfeWindow.getHeight() / slices)));
        }
        return transforms;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getWidth() {
        return width;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getHeight() {
        return height;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Rectangle2D getDtfeWindow() {
        return dtfeWindow;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector toDtfeVector( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int x,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int y) {
        return new Vector(dtfeWindow.getMinX() + dtfeWindow.getWidth() * x / width, dtfeWindow.getMinY() + dtfeWindow.getHeight() * y / height);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Point toImagePoint(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector v) {
        double x = (v.x - dtfeWindow.getMinX()) * width / dtfeWindow.getWidth();
        double y = (v.y - dtfeWindow.getMinY()) * height / dtfeWindow.getHeight();
        return new Point((int) x, (int) y);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterable<Point2D> toImagePoints(Iterable<? extends Vector> vectors) {
        return Iterables.transform(vectors, new Function<Vector, Point2D>() {

            public Point2D apply(Vector vector) {
                return toImagePoint(vector);
            }
        });
    }
}
