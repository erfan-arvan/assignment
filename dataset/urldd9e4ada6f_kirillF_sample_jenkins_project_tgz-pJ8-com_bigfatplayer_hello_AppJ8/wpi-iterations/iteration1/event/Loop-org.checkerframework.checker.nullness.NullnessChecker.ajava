package event;

import java.nio.channels.Selector;
import java.nio.channels.spi.SelectorProvider;

/**
 * This is the basis for a java (nio) based event loop. It's meant
 * to be used to perform non-calculation intensive tasks (typically io) from
 * within a single thread.
 *
 * As a consequence, long running or blocking functions should not be executed fomr
 * within the Loop (because we're within a single thread and long-running tasks
 * would hold up everything else) and interaction with the loop should only be
 * performed from within the loop thread itself (see @isLoopThread()).
 *
 * Tasks may be inserted into the loop using Timeouts (see @TimeoutLoop).
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public abstract class Loop extends Thread {

    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long maxSleep = 0;

    volatile  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean stopped;

    // this is the thread running the main loop
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Thread loopThread;

    // used to determine that we're not being run in another thread
    protected Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull ErrorCallback errCB;

    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Selector selector;

    @org.checkerframework.dataflow.qual.Impure
    public Loop() {
        try {
            this.selector = SelectorProvider.provider().openSelector();
        } catch (java.io.IOException ioe) {
            throw new RuntimeException(ioe);
        }
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.errCB" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public Loop(Callback.ErrorCallback cb) {
        this();
        this.setErrCB(cb);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isRunning() {
        return !this.stopped;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void run(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop this) {
        this.loopThread = Thread.currentThread();
        int numSelected = 0;
        while (!this.stopped) {
            try {
                // p("sel:"+this.maxSleep);
                numSelected = this.selector.select(this.maxSleep);
                if (this.stopped) {
                    break;
                }
                // reset maxSleep
                this.maxSleep = 0;
                go();
            } catch (Throwable t) {
                onError(t);
            }
        }
    }

    /**
     * Determine whether the Thread calling this method is the same thread
     * as the one running the loop. Outside threads should not interact with
     * the loop.
     */
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isLoopThread() {
        if (this.loopThread != null && Thread.currentThread().equals(this.loopThread)) {
            return true;
        }
        return false;
    }

    @org.checkerframework.checker.nullness.qual.RequiresNonNull({ "this.loopThread" })
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected abstract void go() throws Throwable;

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Throwable t) {
        if (null != this.errCB) {
            this.errCB.onError(this, t);
        } else {
            Callback.DEFAULT_ERROR_CB.onError(this, t);
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String msg) {
        if (null != this.errCB) {
            this.errCB.onError(this, msg);
        } else {
            Callback.DEFAULT_ERROR_CB.onError(this, msg);
        }
    }

    /**
     * Force the loop to run
     */
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.errCB" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void wake() {
        this.selector.wakeup();
    }

    /**
     * exit the loop
     */
    @org.checkerframework.dataflow.qual.Impure
    public void stopLoop() {
        // this does not need to be synchronized,
        // it will definately stop the loop eventually...
        this.stopped = true;
        //this.wake();
        try {
            this.selector.close();
        } catch (Throwable t) {
            t.printStackTrace();
        }
    }

    /**
     *  Provide an error callback in case the loop itself runs
     *  into a problem. Default behaviour is to panic and call
     *  `System.exit()`
     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.errCB" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.loopThread" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void setErrCB(Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ErrorCallback errCB) {
        this.errCB = errCB;
    }

    @org.checkerframework.dataflow.qual.Impure
    static void p(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object o) {
        System.out.println(o);
    }

    @org.checkerframework.dataflow.qual.Impure
    static void st(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String mes) {
        p(mes);
        for (StackTraceElement e : Thread.currentThread().getStackTrace()) {
            p(e);
        }
    }
}
