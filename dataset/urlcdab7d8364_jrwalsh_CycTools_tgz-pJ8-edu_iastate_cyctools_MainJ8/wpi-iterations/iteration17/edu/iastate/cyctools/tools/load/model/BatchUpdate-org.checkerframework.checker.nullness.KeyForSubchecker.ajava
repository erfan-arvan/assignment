package edu.iastate.cyctools.tools.load.model;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.TreeSet;
import java.util.concurrent.ExecutionException;
import javax.swing.DefaultListModel;
import javax.swing.ProgressMonitor;
import edu.iastate.cyctools.DefaultController;
import edu.iastate.cyctools.externalSourceCode.AbstractModel;
import edu.iastate.cyctools.tools.load.threadedTasks.DownloadFramesTask;
import edu.iastate.cyctools.tools.load.view.LoadPanel;
import edu.iastate.cyctools.view.dialog.TranslucentGlassPane;
import edu.iastate.javacyco.Frame;
import edu.iastate.javacyco.JavacycConnection;
import edu.iastate.javacyco.PtoolsErrorException;

// Contains a group of updates (AbstractFrameEdit).  Knows how to compare them to existing KB, commit them to KB, and report on the results of the commit.
// Save/revert of the KB must still be done separately, as save/revert of KB is not handled by this class.
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class BatchUpdate extends AbstractModel {

    private  LoadPanel loadPanel;

    private  ProgressMonitor progressMonitor;

    private  DownloadFramesTask task;

    private  ArrayList<Frame> framesFromKB;

    private  ArrayList<AbstractFrameEdit> frameEdits;

    // Provides a way to index frameEdits which relate to a particular frame;
    private  HashMap<String, ArrayList<AbstractFrameEdit>> frameEditsMap;

    private  TreeSet<String> frameIDSet;

    private  TreeSet<Integer> lines;

    private  TreeSet<Integer> linesProcessed;

    private  ArrayList<Event> eventLog;

    @org.checkerframework.dataflow.qual.Impure
    public BatchUpdate( ArrayList<AbstractFrameEdit> frameEditList,  LoadPanel loadPanel) {
        this.loadPanel = loadPanel;
        initDefault();
        this.frameEdits = frameEditList;
        frameEditsMap = new HashMap<String, ArrayList<AbstractFrameEdit>>();
        frameIDSet = new TreeSet<String>();
        for (AbstractFrameEdit frameEdit : frameEdits) {
            for (int row : frameEdit.getAssociatedRows()) {
                lines.add(new Integer(row));
            }
            if (frameEditsMap.containsKey(frameEdit.getFrameID())) {
                ArrayList<AbstractFrameEdit> frameEditArray = frameEditsMap.get(frameEdit.getFrameID());
                frameEditArray.add(frameEdit);
                frameEditsMap.put(frameEdit.getFrameID(), frameEditArray);
            } else {
                ArrayList<AbstractFrameEdit> frameEditArray = new ArrayList<AbstractFrameEdit>();
                frameEditArray.add(frameEdit);
                frameEditsMap.put(frameEdit.getFrameID(), frameEditArray);
            }
            frameIDSet.add(frameEdit.getFrameID());
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void initDefault( BatchUpdate this) {
        linesProcessed = new TreeSet<Integer>();
        lines = new TreeSet<Integer>();
        eventLog = new ArrayList<Event>();
    }

    // Accessors
    @org.checkerframework.dataflow.qual.Pure
    public  ArrayList<AbstractFrameEdit> getFrameEdits() {
        return frameEdits;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  HashMap<String, ArrayList<AbstractFrameEdit>> getFrameEditsMap() {
        return frameEditsMap;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  TreeSet<String> getFrameIDSet( BatchUpdate this) {
        return frameIDSet;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getLines() {
        return lines.size();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  ArrayList<Event> getEventLog( BatchUpdate this) {
        return eventLog;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  DefaultListModel<String> getFrameIDsModel( BatchUpdate this) {
        DefaultListModel<String> listModel = new DefaultListModel<String>();
        for (String frameID : getFrameIDSet()) {
            listModel.addElement(frameID);
        }
        return listModel;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void downloadFrames( BatchUpdate this,  JavacycConnection conn) {
        progressMonitor = new ProgressMonitor(DefaultController.mainJFrame, "Analyzing Imports...", "", 0, 100);
        task = new DownloadFramesTask(conn, progressMonitor, frameIDSet);
        task.addPropertyChangeListener(new PropertyChangeListener() {

            @org.checkerframework.dataflow.qual.Impure
            public void propertyChange( PropertyChangeEvent e) {
                if ("progress".equals(e.getPropertyName())) {
                    progressMonitor.setProgress((Integer) e.getNewValue());
                    if (progressMonitor.isCanceled()) {
                        task.cancel(true);
                    }
                    if (task.isDone() && !task.isCancelled()) {
                        try {
                            framesFromKB = task.get();
                            progressMonitor.setProgress(0);
                            progressMonitor.close();
                            loadPanel.showPreviewPanel();
                            loadPanel.addAuthorCredits();
                            DefaultController.mainJFrame.getGlassPane().setVisible(false);
                        } catch (InterruptedException e1) {
                            framesFromKB = new ArrayList<Frame>();
                        } catch (ExecutionException e1) {
                            e1.printStackTrace();
                        }
                    }
                    if (task.isCancelled()) {
                        framesFromKB = new ArrayList<Frame>();
                        progressMonitor.setProgress(0);
                        progressMonitor.close();
                        DefaultController.mainJFrame.getGlassPane().setVisible(false);
                    }
                }
            }
        });
        DefaultController.mainJFrame.setGlassPane(new TranslucentGlassPane());
        DefaultController.mainJFrame.getGlassPane().setVisible(true);
        task.execute();
    }

    @org.checkerframework.dataflow.qual.Impure
    public  DefaultListModel<String> framesWhichModifyKB( BatchUpdate this,  JavacycConnection conn) {
        DefaultListModel<String> listModel = new DefaultListModel<String>();
        TreeSet<String> frameSet = new TreeSet<String>();
        for (AbstractFrameEdit frameEdit : frameEdits) {
            Frame frame = getFrameByID(frameEdit.getFrameID());
            if (frame == null)
                frameSet.add(frameEdit.getFrameID());
            else {
                boolean modifiesKB = true;
                try {
                    modifiesKB = frameEdit.modifiesFrame(conn, frame);
                } catch (PtoolsErrorException e) {
                    e.printStackTrace();
                }
                if (modifiesKB) {
                    frameSet.add(frameEdit.getFrameID());
                }
            }
        }
        for (String frame : frameSet) listModel.addElement(frame);
        return listModel;
    }

    @org.checkerframework.dataflow.qual.Impure
    private  TreeSet<String> getFramesWhichModifyKB( BatchUpdate this,  JavacycConnection conn) {
        TreeSet<String> frameSet = new TreeSet<String>();
        for (AbstractFrameEdit frameEdit : frameEdits) {
            Frame frame = getFrameByID(frameEdit.getFrameID());
            if (frame == null)
                frameSet.add(frameEdit.getFrameID());
            else {
                boolean modifiesKB = true;
                try {
                    modifiesKB = frameEdit.modifiesFrame(conn, frame);
                } catch (PtoolsErrorException e) {
                    e.printStackTrace();
                }
                if (modifiesKB) {
                    frameSet.add(frameEdit.getFrameID());
                }
            }
        }
        return frameSet;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void createAuthorCredits( BatchUpdate this,  String author,  String organization,  JavacycConnection conn) {
        TreeSet<String> frameIDs = getFramesWhichModifyKB(conn);
        Calendar now = new GregorianCalendar();
        String seconds = "" + now.get(Calendar.SECOND);
        String minutes = "" + now.get(Calendar.MINUTE);
        String hours = "" + now.get(Calendar.HOUR_OF_DAY);
        String day = "" + now.get(Calendar.DAY_OF_MONTH);
        String month = "" + now.get(Calendar.MONTH);
        String year = "" + now.get(Calendar.YEAR);
        String encodedTime = "";
        try {
            encodedTime = conn.encodeTimeStamp(seconds, minutes, hours, day, month, year);
        } catch (PtoolsErrorException e) {
            e.printStackTrace();
        }
        for (String frameID : frameIDs) frameEdits.add(new AuthorCreditUpdate(frameID, author, organization, encodedTime, new int[0]));
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Frame getFrameByID( BatchUpdate this,  String frameID) {
        for (Frame frame : framesFromKB) {
            if (frame.getLocalID().equalsIgnoreCase(frameID))
                return frame;
        }
        return null;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Frame updateLocalFrame( BatchUpdate this,  Frame originalFrame) {
        if (originalFrame == null)
            return null;
        Frame frameToModify = originalFrame.copy(originalFrame.getLocalID());
        for (AbstractFrameEdit frameEdit : frameEdits) {
            if (frameEdit.getFrameID().equals(originalFrame.getLocalID())) {
                try {
                    frameToModify = frameEdit.commitLocal(frameToModify);
                } catch (PtoolsErrorException e) {
                    e.printStackTrace();
                    return null;
                }
            }
        }
        return frameToModify;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void commitToKB( BatchUpdate this,  JavacycConnection conn) {
        System.out.println("Converted " + lines.size() + " lines of updates into " + frameEdits.size() + " individual updates spanning across " + frameIDSet.size() + " frames.\n");
        System.out.println("Processing individual updates...\n");
        for (AbstractFrameEdit frameEdit : frameEdits) {
            boolean result = false;
            try {
                for (int row : frameEdit.getAssociatedRows()) {
                    linesProcessed.add(new Integer(row));
                }
                result = frameEdit.commit(conn);
            } catch (PtoolsErrorException e) {
                e.printStackTrace();
            }
            if (result) {
                Event event = new Event(new Date(), Status.SUCCESS, frameEdit.toString());
                eventLog.add(event);
            } else {
                Event event = new Event(new Date(), Status.FAIL, frameEdit.toString());
                eventLog.add(event);
            }
        }
    }

    public class Event {

        private  Date timestamp;

        private  Status status;

        private  String event;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public Event( Date timestamp,  Status status,  String event) {
            this.timestamp = timestamp;
            this.status = status;
            this.event = event;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Date getTimeStamp() {
            return timestamp;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  Status getStatus( Event this) {
            return status;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  String getEvent() {
            return event;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  String toString( Event this) {
            return timestamp.toString() + "\t" + status.toString() + "\t" + event;
        }
    }

    public enum Status {

        SUCCESS, FAIL, NOCHANGE
    }
}
