/*     */
package org.ands.rifcs.base;

/*     */
/*     */
import java.util.ArrayList;
/*     */
import java.util.List;
/*     */
import org.w3c.dom.Element;
/*     */
import org.w3c.dom.Node;
/*     */
import org.w3c.dom.NodeList;

/*     */
/*     */
/*     */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Address extends RIFCSElement {

    /*     */
    /*  35 */
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Electronic> electronics = new ArrayList();

    /*  36 */
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Physical> physicals = new ArrayList();

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.dataflow.qual.Impure
    protected Address(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node n) throws /*     */
    RIFCSException /*     */
    {
        /*  49 */
        super(n, "address");
        /*  50 */
        initStructures();
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Electronic newElectronic() throws /*     */
    RIFCSException /*     */
    {
        /*  68 */
        return new Electronic(newElement("electronic"));
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    public void addElectronic(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Electronic electronic) /*     */
    {
        /*  80 */
        getElement().appendChild(electronic.getElement());
        /*  81 */
        this.electronics.add(electronic);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Electronic> getElectronics() /*     */
    {
        /*  93 */
        return this.electronics;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Physical newPhysical() throws /*     */
    RIFCSException /*     */
    {
        /* 111 */
        return new Physical(newElement("physical"));
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    public void addPhysical(Physical physical) /*     */
    {
        /* 123 */
        if (this.physicals == null) /*     */
        {
            /* 125 */
            this.physicals = new ArrayList();
            /*     */
        }
        /*     */
        /* 128 */
        getElement().appendChild(physical.getElement());
        /* 129 */
        this.physicals.add(physical);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Physical> getPhysicalAddresses() /*     */
    {
        /* 141 */
        return this.physicals;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    private void initStructures() throws /*     */
    RIFCSException /*     */
    {
        /* 148 */
        initPhysicals();
        /* 149 */
        initElectronics();
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    private void initPhysicals() throws RIFCSException /*     */
    {
        /* 154 */
        NodeList nl = super.getElements("physical");
        /*     */
        /* 156 */
        for (int i = 0; i < nl.getLength(); i++) /*     */
        {
            /* 158 */
            this.physicals.add(new Physical(nl.item(i)));
            /*     */
        }
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    private void initElectronics() throws RIFCSException /*     */
    {
        /* 164 */
        NodeList nl = super.getElements("electronic");
        /*     */
        /* 166 */
        for (int i = 0; i < nl.getLength(); i++) /*     */
        {
            /* 168 */
            this.electronics.add(new Electronic(nl.item(i)));
            /*     */
        }
        /*     */
    }
}
/* Location:           /Users/przemyslaw/Downloads/rifcs-api-1.3.0.jar
 * Qualified Name:     org.ands.rifcs.base.Address
 * JD-Core Version:    0.6.2
 */
