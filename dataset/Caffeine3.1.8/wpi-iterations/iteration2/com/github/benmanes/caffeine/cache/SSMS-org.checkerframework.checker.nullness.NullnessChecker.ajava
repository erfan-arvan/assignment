// Copyright 2024 Ben Manes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.github.benmanes.caffeine.cache;

import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * <em>WARNING: GENERATED CODE</em>
 *
 * <p>A cache that provides the following features:
 *
 * <ul>
 *   <li>MaximumSize
 *   <li>StrongKeys (inherited)
 *   <li>StrongValues (inherited)
 * </ul>
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class SSMS<K, V> extends SS<K, V> {

    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LocalCacheFactory FACTORY = SSMS::new;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long maximum;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long weightedSize;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long windowMaximum;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long windowWeightedSize;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long mainProtectedMaximum;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long mainProtectedWeightedSize;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double stepSize;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long adjustment;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int hitsInSample;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int missesInSample;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double previousSampleHitRate;

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FrequencySketch<K> sketch;

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull AccessOrderDeque<Node<K, V>> accessOrderWindowDeque;

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AccessOrderDeque<Node<K, V>> accessOrderProbationDeque;

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AccessOrderDeque<Node<K, V>> accessOrderProtectedDeque;

    @org.checkerframework.dataflow.qual.Impure
    SSMS(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Caffeine<K, V> builder, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AsyncCacheLoader<? super K, V> cacheLoader,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean async) {
        super(builder, cacheLoader, async);
        this.sketch = new FrequencySketch<K>();
        if (builder.hasInitialCapacity()) {
            long capacity = Math.min(builder.getMaximum(), builder.getInitialCapacity());
            this.sketch.ensureCapacity(capacity);
        }
        this.accessOrderWindowDeque = builder.evicts() || builder.expiresAfterAccess() ? new AccessOrderDeque<Node<K, V>>() : null;
        this.accessOrderProbationDeque = new AccessOrderDeque<Node<K, V>>();
        this.accessOrderProtectedDeque = new AccessOrderDeque<Node<K, V>>();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean evicts(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return true;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long maximum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return maximum;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setMaximum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long maximum) {
        this.maximum = maximum;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long weightedSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return weightedSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setWeightedSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long weightedSize) {
        this.weightedSize = weightedSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long windowMaximum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return windowMaximum;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setWindowMaximum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long windowMaximum) {
        this.windowMaximum = windowMaximum;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long windowWeightedSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return windowWeightedSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setWindowWeightedSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long windowWeightedSize) {
        this.windowWeightedSize = windowWeightedSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long mainProtectedMaximum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return mainProtectedMaximum;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setMainProtectedMaximum(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long mainProtectedMaximum) {
        this.mainProtectedMaximum = mainProtectedMaximum;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long mainProtectedWeightedSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return mainProtectedWeightedSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setMainProtectedWeightedSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long mainProtectedWeightedSize) {
        this.mainProtectedWeightedSize = mainProtectedWeightedSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double stepSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return stepSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setStepSize(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double stepSize) {
        this.stepSize = stepSize;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long adjustment(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return adjustment;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setAdjustment(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long adjustment) {
        this.adjustment = adjustment;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int hitsInSample(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return hitsInSample;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setHitsInSample(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int hitsInSample) {
        this.hitsInSample = hitsInSample;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int missesInSample(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return missesInSample;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setMissesInSample(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int missesInSample) {
        this.missesInSample = missesInSample;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double previousSampleHitRate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return previousSampleHitRate;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected final void setPreviousSampleHitRate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double previousSampleHitRate) {
        this.previousSampleHitRate = previousSampleHitRate;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FrequencySketch<K> frequencySketch(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return sketch;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean fastpath(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return true;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable AccessOrderDeque<Node<K, V>> accessOrderWindowDeque(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return accessOrderWindowDeque;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AccessOrderDeque<Node<K, V>> accessOrderProbationDeque(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return accessOrderProbationDeque;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.accessOrderWindowDeque" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AccessOrderDeque<Node<K, V>> accessOrderProtectedDeque(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SSMS<K, V> this) {
        return accessOrderProtectedDeque;
    }
}
