package org.delaunay.dtfe;

import org.delaunay.Utils;
import org.delaunay.algorithm.Triangulation.InvalidVertexException;
import org.delaunay.dtfe.interpolation.InterpolationStrategy;
import org.delaunay.model.Triangle;
import org.delaunay.model.TriangulationMap;
import org.delaunay.model.Vector;
import org.delaunay.model.Vertex;
import com.google.common.base.Function;

/**
 * Computes the Delaunay Tesselation Field Estimator (DTFE):
 * http://en.wikipedia.org/wiki/Delaunay_tessellation_field_estimator
 *
 * This method produces very good heatmaps from discrete data.
 *
 * @param <T> a model that implements the DensityModel interface
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class DtfeTriangulationMap<T extends DensityModel> extends TriangulationMap<T> {

    public static enum ScaleType {

        LINEAR, LOG
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void triangulate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DtfeTriangulationMap<T> this) throws InvalidVertexException {
        super.triangulate();
        computeDtfe();
    }

    /**
     * Returns the density of the vertex.
     */
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double getDensity(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex v) {
        T model = get(v);
        if (model == null) {
            return 0.0;
        } else if (getTriangulation().neighborsSuperVertex(v)) {
            return 0.0;
        } else {
            return model.getDensity();
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double getInterpolatedDensity(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector v, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull InterpolationStrategy strategy) {
        return strategy.getDensity(this, v);
    }

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Double maxDensity = null;

    /**
     * Returns the maximum density value for all vertices
     */
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.maxDensity" })
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double getMaxDensity() {
        if (maxDensity == null) {
            maxDensity = Utils.maxValue(getTriangulation().getVertices(), new Function<Vertex, Double>() {

                public Double apply(Vertex v) {
                    return Math.abs(getDensity(v));
                }
            });
        }
        return maxDensity;
    }

    /**
     * Returns a value of 0.0 to 1.0, where 1.0 represents the maximum density
     * value. This can be plugged directly into a {@link ColorScale} object.
     */
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double getRelativeDensity( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double d, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ScaleType scaleType) {
        if (d == 0)
            return 0;
        boolean neg = (d < 0);
        d = Math.abs(d);
        double relativeDensity = scaleType == ScaleType.LOG ? Math.log10(1 + d) / Math.log10(1 + getMaxDensity()) : d / getMaxDensity();
        return relativeDensity * (neg ? -1 : 1);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.maxDensity" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    private void computeDtfe() {
        for (Vertex v : getTriangulation().getVertices()) {
            double area = 0.0;
            for (Triangle tri : v.getNeighborTriangles()) {
                area += tri.getArea();
            }
            T model = get(v);
            model.setDensity(area == 0 ? 0.0 : model.getWeight() / area);
        }
    }
}
