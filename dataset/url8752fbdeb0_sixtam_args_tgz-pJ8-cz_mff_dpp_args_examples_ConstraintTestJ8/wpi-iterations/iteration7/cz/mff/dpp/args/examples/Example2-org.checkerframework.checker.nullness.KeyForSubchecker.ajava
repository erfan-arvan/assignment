package cz.mff.dpp.args.examples;

import cz.mff.dpp.args.*;
import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class Example2 {

    List<String> list;

    enum Animal {

        DOG, CAT, PIG
    }

    @org.checkerframework.dataflow.qual.Impure
    private void setAnimal(Animal animal) {
        //only enum constants can be use with this option
        //otherwise ParseException will be produced
        switch(animal) {
            case CAT:
                System.out.println("MEOW");
                break;
            case DOG:
                System.out.println("WOOF");
                break;
            case PIG:
                System.out.println("CHRO");
                break;
            default:
                System.out.println("UNKNOWN ANIMAL");
        }
    }

    Integer n;

    public MyClass //this field will be set correctly
    myClass;

    @org.checkerframework.dataflow.qual.Impure
    public static void main( String  [] args) {
        //Set values into args manually
        args = new String[] { "--list", "v1", "v2", "v3", "--animal", "CAT", "-n", "1000", "--doubleString=aa:bb" };
        Example2 ex = new Example2();
        Parser parser = new Parser(ex);
        try {
            parser.parse(args);
        } catch (ParseException ex1) {
            parser.usage();
            System.exit(0);
        }
        //some code here
    }

    public static class MyClass {

        public  String s1;

        public  String s2;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public MyClass( String s1,  String s2) {
            this.s1 = s1;
            this.s2 = s2;
        }

        //factory method must have only one String param
        @org.checkerframework.dataflow.qual.Pure
        public static  MyClass valueOf(String expr) {
            String[] values = expr.split(":");
            return new MyClass(values[0], values[1]);
        }
    }
}
