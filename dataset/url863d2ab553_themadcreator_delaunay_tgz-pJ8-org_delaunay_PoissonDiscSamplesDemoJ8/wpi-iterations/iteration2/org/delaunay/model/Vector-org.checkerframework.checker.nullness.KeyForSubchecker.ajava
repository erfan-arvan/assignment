package org.delaunay.model;

import java.awt.geom.Point2D;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public strictfp class Vector {

    public final double x, y;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Vector(  double x,   double y) {
        this.x = x;
        this.y = y;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Vector multiply( Vector this,   double s) {
        return new Vector(x * s, y * s);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Vector divide(double s) {
        return new Vector(x / s, y / s);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Vector subtract( Vector this,  Vector v) {
        return new Vector(x - v.x, y - v.y);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Vector add( Vector this,  Vector v) {
        return new Vector(x + v.x, y + v.y);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   double dot( Vector this,  Vector v) {
        return (x * v.x) + (y * v.y);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   double cross( Vector this,  Vector v) {
        return (x * v.y) - (y * v.x);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   double lengthSquared( Vector this) {
        return dot(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public   double length( Vector this) {
        return Math.sqrt(lengthSquared());
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Vector normalize( Vector this) {
        double l = length();
        return new Vector(x / l, y / l);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Vector normalTo( Vector this,  Vector v) {
        return new Vector(y - v.y, v.x - x);
    }

    /*
	 * Does this vector lie on the left or right of ab?
	 *   -1 = left
	 *    0 = on
	 *    1 = right
	 */
    @org.checkerframework.dataflow.qual.Pure
    public   int orientation( Vector this,  Vector a,  Vector b) {
        double det = (a.x - x) * (b.y - y) - (b.x - x) * (a.y - y);
        return (new Double(det).compareTo(0.0));
    }

    @org.checkerframework.dataflow.qual.Pure
    public Point2D. Double toPoint( Vector this) {
        return new Point2D.Double(x, y);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String toString( Vector this) {
        return String.format("(%.4f, %.4f)", x, y);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( Vector this) {
        final int prime = 31;
        int result = 1;
        long temp;
        temp = Double.doubleToLongBits(x);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(y);
        result = prime * result + (int) (temp ^ (temp >>> 32));
        return result;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( Vector this,  Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Vector other = (Vector) obj;
        if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))
            return false;
        if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))
            return false;
        return true;
    }
}
