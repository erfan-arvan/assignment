/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bigfatplayer.hello;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class Work implements org.apache.thrift.TBase<Work, Work._Fields>, java.io.Serializable, Cloneable {

    private static final org.apache.thrift.protocol. TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Work");

    private static final org.apache.thrift.protocol. TField NUM1_FIELD_DESC = new org.apache.thrift.protocol.TField("num1", org.apache.thrift.protocol.TType.I32, (short) 1);

    private static final org.apache.thrift.protocol. TField NUM2_FIELD_DESC = new org.apache.thrift.protocol.TField("num2", org.apache.thrift.protocol.TType.I32, (short) 2);

    private static final org.apache.thrift.protocol. TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final  Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new WorkStandardSchemeFactory());
        schemes.put(TupleScheme.class, new WorkTupleSchemeFactory());
    }

    // required
    public   int num1;

    // required
    public   int num2;

    // optional
    public  String comment;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {

        NUM1((short) 1, "num1"), NUM2((short) 2, "num2"), COMMENT((short) 3, "comment");

        private static final  Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        @org.checkerframework.dataflow.qual.Pure
        public static  _Fields findByThriftId(  int fieldId) {
            switch(fieldId) {
                case // NUM1
                1:
                    return NUM1;
                case // NUM2
                2:
                    return NUM2;
                case // COMMENT
                3:
                    return COMMENT;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        @org.checkerframework.dataflow.qual.Pure
        public static  _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        @org.checkerframework.dataflow.qual.Pure
        public static  _Fields findByName(String name) {
            return byName.get(name);
        }

        private final   short _thriftId;

        private final  String _fieldName;

        @org.checkerframework.dataflow.qual.Impure
        _Fields(  short thriftId,  String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        @org.checkerframework.dataflow.qual.Pure
        public   short getThriftFieldId( _Fields this) {
            return _thriftId;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  String getFieldName( _Fields this) {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final   int __NUM1_ISSET_ID = 0;

    private static final   int __NUM2_ISSET_ID = 1;

    private   byte __isset_bitfield = 0;

    private  _Fields  [] optionals = { _Fields.COMMENT };

    public static final  Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NUM1, new org.apache.thrift.meta_data.FieldMetaData("num1", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.NUM2, new org.apache.thrift.meta_data.FieldMetaData("num2", org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Work.class, metaDataMap);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Work() {
        this.num1 = 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public Work(int num1, int num2) {
        this();
        this.num1 = num1;
        setNum1IsSet(true);
        this.num2 = num2;
        setNum2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public Work( Work other) {
        __isset_bitfield = other.__isset_bitfield;
        this.num1 = other.num1;
        this.num2 = other.num2;
        if (other.isSetComment()) {
            this.comment = other.comment;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Work deepCopy( Work this) {
        return new Work(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void clear( Work this) {
        this.num1 = 0;
        setNum2IsSet(false);
        this.num2 = 0;
        this.comment = null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getNum1( Work this) {
        return this.num1;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Work setNum1( Work this,   int num1) {
        this.num1 = num1;
        setNum1IsSet(true);
        return this;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void unsetNum1( Work this) {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    /**
     * Returns true if field num1 is set (has been assigned a value) and false otherwise
     */
    @org.checkerframework.dataflow.qual.Impure
    public   boolean isSetNum1( Work this) {
        return EncodingUtils.testBit(__isset_bitfield, __NUM1_ISSET_ID);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setNum1IsSet( Work this,   boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM1_ISSET_ID, value);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getNum2( Work this) {
        return this.num2;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Work setNum2( Work this,   int num2) {
        this.num2 = num2;
        setNum2IsSet(true);
        return this;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void unsetNum2( Work this) {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    /**
     * Returns true if field num2 is set (has been assigned a value) and false otherwise
     */
    @org.checkerframework.dataflow.qual.Impure
    public   boolean isSetNum2( Work this) {
        return EncodingUtils.testBit(__isset_bitfield, __NUM2_ISSET_ID);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setNum2IsSet( Work this,   boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM2_ISSET_ID, value);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getComment( Work this) {
        return this.comment;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Work setComment( Work this,  String comment) {
        this.comment = comment;
        return this;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void unsetComment( Work this) {
        this.comment = null;
    }

    /**
     * Returns true if field comment is set (has been assigned a value) and false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean isSetComment( Work this) {
        return this.comment != null;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setCommentIsSet( Work this,   boolean value) {
        if (!value) {
            this.comment = null;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setFieldValue( Work this,  _Fields field,  Object value) {
        switch(field) {
            case NUM1:
                if (value == null) {
                    unsetNum1();
                } else {
                    setNum1((Integer) value);
                }
                break;
            case NUM2:
                if (value == null) {
                    unsetNum2();
                } else {
                    setNum2((Integer) value);
                }
                break;
            case COMMENT:
                if (value == null) {
                    unsetComment();
                } else {
                    setComment((String) value);
                }
                break;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Object getFieldValue( Work this,  _Fields field) {
        switch(field) {
            case NUM1:
                return Integer.valueOf(getNum1());
            case NUM2:
                return Integer.valueOf(getNum2());
            case COMMENT:
                return getComment();
        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    @org.checkerframework.dataflow.qual.Impure
    public   boolean isSet( Work this,  _Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }
        switch(field) {
            case NUM1:
                return isSetNum1();
            case NUM2:
                return isSetNum2();
            case COMMENT:
                return isSetComment();
        }
        throw new IllegalStateException();
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean equals( Work this,  Object that) {
        if (that == null)
            return false;
        if (that instanceof Work)
            return this.equals((Work) that);
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( Work this,  Work that) {
        if (that == null)
            return false;
        boolean this_present_num1 = true;
        boolean that_present_num1 = true;
        if (this_present_num1 || that_present_num1) {
            if (!(this_present_num1 && that_present_num1))
                return false;
            if (this.num1 != that.num1)
                return false;
        }
        boolean this_present_num2 = true;
        boolean that_present_num2 = true;
        if (this_present_num2 || that_present_num2) {
            if (!(this_present_num2 && that_present_num2))
                return false;
            if (this.num2 != that.num2)
                return false;
        }
        boolean this_present_comment = true && this.isSetComment();
        boolean that_present_comment = true && that.isSetComment();
        if (this_present_comment || that_present_comment) {
            if (!(this_present_comment && that_present_comment))
                return false;
            if (!this.comment.equals(that.comment))
                return false;
        }
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( Work this) {
        return 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   int compareTo( Work this,  Work other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }
        int lastComparison = 0;
        Work typedOther = (Work) other;
        lastComparison = Boolean.valueOf(isSetNum1()).compareTo(typedOther.isSetNum1());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNum1()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num1, typedOther.num1);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetNum2()).compareTo(typedOther.isSetNum2());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetNum2()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num2, typedOther.num2);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetComment()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  _Fields fieldForId( Work this,   int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void read( Work this, org.apache.thrift.protocol. TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void write( Work this, org.apache.thrift.protocol. TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  String toString( Work this) {
        StringBuilder sb = new StringBuilder("Work(");
        boolean first = true;
        sb.append("num1:");
        sb.append(this.num1);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("num2:");
        sb.append(this.num2);
        first = false;
        if (isSetComment()) {
            if (!first)
                sb.append(", ");
            sb.append("comment:");
            if (this.comment == null) {
                sb.append("null");
            } else {
                sb.append(this.comment);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void validate( Work this) throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    @org.checkerframework.dataflow.qual.Impure
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class WorkStandardSchemeFactory implements SchemeFactory {

        @org.checkerframework.dataflow.qual.Pure
        public  WorkStandardScheme getScheme( WorkStandardSchemeFactory this) {
            return new WorkStandardScheme();
        }
    }

    private static class WorkStandardScheme extends StandardScheme<Work> {

        @org.checkerframework.dataflow.qual.Impure
        public void read( WorkStandardScheme this, org.apache.thrift.protocol. TProtocol iprot,  Work struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch(schemeField.id) {
                    case // NUM1
                    1:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.num1 = iprot.readI32();
                            struct.setNum1IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // NUM2
                    2:
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.num2 = iprot.readI32();
                            struct.setNum2IsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case // COMMENT
                    3:
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.comment = iprot.readString();
                            struct.setCommentIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();
            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        @org.checkerframework.dataflow.qual.Impure
        public void write( WorkStandardScheme this, org.apache.thrift.protocol. TProtocol oprot,  Work struct) throws org.apache.thrift.TException {
            struct.validate();
            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(NUM1_FIELD_DESC);
            oprot.writeI32(struct.num1);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(NUM2_FIELD_DESC);
            oprot.writeI32(struct.num2);
            oprot.writeFieldEnd();
            if (struct.comment != null) {
                if (struct.isSetComment()) {
                    oprot.writeFieldBegin(COMMENT_FIELD_DESC);
                    oprot.writeString(struct.comment);
                    oprot.writeFieldEnd();
                }
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }
    }

    private static class WorkTupleSchemeFactory implements SchemeFactory {

        @org.checkerframework.dataflow.qual.Pure
        public  WorkTupleScheme getScheme( WorkTupleSchemeFactory this) {
            return new WorkTupleScheme();
        }
    }

    private static class WorkTupleScheme extends TupleScheme<Work> {

        @org.checkerframework.dataflow.qual.Impure
        public void write( WorkTupleScheme this, org.apache.thrift.protocol. TProtocol prot,  Work struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetNum1()) {
                optionals.set(0);
            }
            if (struct.isSetNum2()) {
                optionals.set(1);
            }
            if (struct.isSetComment()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetNum1()) {
                oprot.writeI32(struct.num1);
            }
            if (struct.isSetNum2()) {
                oprot.writeI32(struct.num2);
            }
            if (struct.isSetComment()) {
                oprot.writeString(struct.comment);
            }
        }

        @org.checkerframework.dataflow.qual.Impure
        public void read( WorkTupleScheme this, org.apache.thrift.protocol. TProtocol prot,  Work struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.num1 = iprot.readI32();
                struct.setNum1IsSet(true);
            }
            if (incoming.get(1)) {
                struct.num2 = iprot.readI32();
                struct.setNum2IsSet(true);
            }
            if (incoming.get(2)) {
                struct.comment = iprot.readString();
                struct.setCommentIsSet(true);
            }
        }
    }
}
