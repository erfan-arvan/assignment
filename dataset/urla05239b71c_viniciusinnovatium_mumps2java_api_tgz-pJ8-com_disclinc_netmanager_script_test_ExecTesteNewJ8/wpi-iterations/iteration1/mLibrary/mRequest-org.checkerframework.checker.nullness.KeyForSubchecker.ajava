package mLibrary;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class mRequest {

    private  mData data = new mData();

    private  Map<String, String[]> cgiEnvs = new HashMap<String, String[]>();

    private mContent content;

    @org.checkerframework.dataflow.qual.Impure
    public mRequest(Map<String, String[]> map) {
        populateParameter(map);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void populateParameter( mRequest this,  Map<String, String[]> map) {
        Set<Entry<String, String[]>> results = map.entrySet();
        for (Entry<String, String[]> result : results) {
            for (int i = 0; i < result.getValue().length; i++) {
                setData(result.getKey(), i + 1, result.getValue()[i]);
            }
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public  mVar getCgiEnvs(Object key) {
        mVar var = varData(String.valueOf(key), 1);
        return var;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  mVar getCgiEnvs(Object key, Object idx) {
        mVar var = varData(String.valueOf(key), Integer.parseInt(String.valueOf(idx)));
        return var;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Map<String, String[]> getCgiEnvs() {
        return cgiEnvs;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setCgiEnvs(Map<String, String[]> cgiEnvs) {
        this.cgiEnvs = cgiEnvs;
        populateParameter(cgiEnvs);
    }

    @org.checkerframework.dataflow.qual.Impure
    public  mVar varData( mRequest this,  Object ... args) {
        mVar var = null;
        List<Object> list = new ArrayList<Object>();
        list.add("data");
        list.addAll(Arrays.asList(args));
        args = list.toArray();
        if (args != null && args.length > 0) {
            var = new mVar(args, this.data);
        }
        return var;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Object getData(Object... args) {
        return varData("data", args).get();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setData( mRequest this,  Object subs,  Object idx,  Object value) {
        data.subs("data", subs, idx).set(value);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void killData(Object object, int i) {
        throw new UnsupportedOperationException();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void setCgiEnvs(String string, Object object) {
        throw new UnsupportedOperationException();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  mContent getContent() {
        // TODO Auto-generated method stub
        return content;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Object getURL() {
        // TODO Auto-generated method stub
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public Object getCgiEnv(Object string, Object pDefault) {
        // TODO Auto-generated method stub
        return null;
    }
}
