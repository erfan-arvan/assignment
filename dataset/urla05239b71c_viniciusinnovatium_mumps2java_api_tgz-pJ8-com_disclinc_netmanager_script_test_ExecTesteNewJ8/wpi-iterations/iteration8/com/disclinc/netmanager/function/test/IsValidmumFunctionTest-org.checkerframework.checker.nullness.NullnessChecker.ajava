package com.disclinc.netmanager.function.test;

import static org.junit.Assert.assertEquals;
import mLibrary.mFnc;
import org.junit.Test;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class IsValidmumFunctionTest {

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateNullPointer() {
        boolean actual = mFnc.$isvalidnum(null);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateInteger() {
        Object obj = "12345";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateDecimal() {
        Object obj = "49.95";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateIntegerWithPlusSign() {
        Object obj = "+49";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateIntegerWithMinusSign() {
        Object obj = "-49";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateDoubleWithMinusSign() {
        Object obj = "-49.99";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateDoubleWithPlusSign() {
        Object obj = "+49.99";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateExponential() {
        Object obj = "49E5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateExponentialMinusSign() {
        Object obj = "-49E5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateExponentialPlusSign() {
        Object obj = "+49E5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateExponentialWithDotSign() {
        Object obj = "4.9E5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateNegativeExponential() {
        Object obj = "4.9E-5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidatePositiveExponential() {
        Object obj = "4.9E+5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateExponentialWithLongIndex() {
        Object obj = "49E589876";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = true;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidadeAlpha() {
        Object obj = "-TEST";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateAlphaNum() {
        Object obj = "TESTE123.5";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateNumAlpha() {
        Object obj = "34.3ABCD";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateDoublePoints() {
        Object obj = "34.34.666";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateWithSigns() {
        Object obj = "+-+-++---+34.34xxx";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testValidateStartWithZero() {
        Object obj = "0000034.34xxx";
        boolean actual = mFnc.$isvalidnum(obj);
        boolean expected = false;
        assertEquals("Fail to validate string. This is not a valid number.", expected, actual);
    }
}
