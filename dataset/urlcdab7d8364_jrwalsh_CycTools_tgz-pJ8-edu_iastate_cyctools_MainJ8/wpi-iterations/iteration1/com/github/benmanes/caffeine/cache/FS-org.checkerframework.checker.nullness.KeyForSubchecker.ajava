// Copyright 2024 Ben Manes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.github.benmanes.caffeine.cache;

import com.github.benmanes.caffeine.cache.References.LookupKeyReference;
import com.github.benmanes.caffeine.cache.References.WeakKeyReference;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;
import java.util.Objects;

/**
 * <em>WARNING: GENERATED CODE</em>
 *
 * <p>A cache entry that provides the following features:
 *
 * <ul>
 *   <li>WeakKeys
 *   <li>StrongValues
 * </ul>
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
class FS<K, V> extends Node<K, V> implements NodeFactory<K, V> {

    protected static final  VarHandle KEY;

    protected static final  VarHandle VALUE;

    static {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        try {
            KEY = lookup.findVarHandle(FS.class, NodeFactory.KEY, WeakKeyReference.class);
            VALUE = lookup.findVarHandle(FS.class, NodeFactory.VALUE, Object.class);
        } catch (ReflectiveOperationException e) {
            throw new ExceptionInInitializerError(e);
        }
    }

    volatile WeakKeyReference<K> key;

    volatile V value;

    @org.checkerframework.dataflow.qual.Impure
    FS() {
    }

    @org.checkerframework.dataflow.qual.Impure
    FS(K key,  ReferenceQueue<K> keyReferenceQueue, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        this(new WeakKeyReference<K>(key, keyReferenceQueue), value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.dataflow.qual.Impure
    FS( Object keyReference, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        KEY.set(this, keyReference);
        VALUE.set(this, value);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final K getKey( FS<K, V> this) {
        return ((Reference<K>) KEY.get(this)).get();
    }

    @org.checkerframework.dataflow.qual.Impure
    public final  Object getKeyReference( FS<K, V> this) {
        return KEY.get(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final V getValue( FS<K, V> this) {
        return (V) VALUE.get(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final  Object getValueReference( FS<K, V> this) {
        return VALUE.get(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final void setValue( FS<K, V> this, V value,  ReferenceQueue<V> referenceQueue) {
        VALUE.setRelease(this, value);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final   boolean containsValue( FS<K, V> this,  Object value) {
        return Objects.equals(value, getValue());
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Node<K, V> newNode( FS<K, V> this, K key,  ReferenceQueue<K> keyReferenceQueue, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        return new FS<>(key, keyReferenceQueue, value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Node<K, V> newNode( FS<K, V> this,  Object keyReference, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        return new FS<>(keyReference, value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Object newLookupKey( FS<K, V> this,  Object key) {
        return new LookupKeyReference<>(key);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Object newReferenceKey( FS<K, V> this, K key,  ReferenceQueue<K> referenceQueue) {
        return new WeakKeyReference<K>(key, referenceQueue);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final   boolean isAlive( FS<K, V> this) {
        Object key = getKeyReference();
        return (key != RETIRED_WEAK_KEY) && (key != DEAD_WEAK_KEY);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final   boolean isRetired( FS<K, V> this) {
        return (getKeyReference() == RETIRED_WEAK_KEY);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final void retire( FS<K, V> this) {
        key.clear();
        KEY.set(this, RETIRED_WEAK_KEY);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final   boolean isDead( FS<K, V> this) {
        return (getKeyReference() == DEAD_WEAK_KEY);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final void die( FS<K, V> this) {
        key.clear();
        VALUE.set(this, null);
        KEY.set(this, DEAD_WEAK_KEY);
    }
}
