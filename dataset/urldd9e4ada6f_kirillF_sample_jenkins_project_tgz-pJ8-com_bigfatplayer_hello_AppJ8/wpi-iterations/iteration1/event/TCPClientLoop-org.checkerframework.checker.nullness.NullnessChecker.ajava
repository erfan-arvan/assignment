package event;

import java.util.Queue;
import java.util.Iterator;
import java.util.LinkedList;
import java.io.IOException;
import java.nio.channels.SocketChannel;
import java.nio.channels.SelectionKey;
import java.nio.ByteBuffer;
import java.net.InetSocketAddress;
import java.net.InetAddress;
import java.net.SocketAddress;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TCPClientLoop extends TimeoutLoop {

    @org.checkerframework.dataflow.qual.Impure
    public TCPClientLoop() {
        super();
        this.dnsLoop = new DNSLoop();
    }

    // quick and dirty hack to keep DNS Queries form blocking in
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DNSLoop dnsLoop;

    // out Loop. A second DNSLoop is started to queue lookups
    // sequentially for now. When the lookup is complete, the request
    // gets requeued in this loop.
    @org.checkerframework.dataflow.qual.Impure
    public void run(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop this) {
        this.dnsLoop.start();
        super.run();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void stopLoop(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop this) {
        if (this.isLoopThread()) {
            // this is opposite to the normal semantics:
            // if we are called from within the loop thread
            // chances are we are iterating over the selected
            // keys in  the main loop. `handleCloseAllSockets`
            // will iterate over all keys and this causes problems
            // in the backing collection of the selector
            this.addTimeout(new Callback.Timeout() {

                @org.checkerframework.dataflow.qual.Impure
                public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop l) {
                    TCPClientLoop.this._stopLoop();
                }
            });
            return;
        }
        _stopLoop();
    }

    @org.checkerframework.dataflow.qual.Impure
    private void _stopLoop() {
        TCPClientLoop.this.dnsLoop.stopLoop();
        handleCloseAllSockets();
        TCPClientLoop.super.stopLoop();
    }

    /**
     * May result in Callback onError being informed of the following Exceptions:
     *  java.io.IOException
     *  java.net.UnknownHostException
     *  java.nio.channels.ClosedChannelException
     */
    @org.checkerframework.dataflow.qual.Impure
    public void createTCPClient(final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable TCPClient cb, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String host, final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int port) {
        this.dnsLoop.lookup(host, new DNSLoop.CB() {

            @org.checkerframework.dataflow.qual.Impure
            public void addr(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable InetAddress addr, java.net.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable UnknownHostException une) {
                if (null != une) {
                    cb.onError(TCPClientLoop.this, une);
                } else {
                    TCPClientLoop.this.createTCPClient(cb, addr, port);
                }
            }
        });
    }

    @org.checkerframework.dataflow.qual.Impure
    public void createTCPClient(final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable TCPClient cb, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable InetAddress host, final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int port) {
        if (this.isLoopThread()) {
            try {
                final SocketChannel sc = SocketChannel.open();
                sc.configureBlocking(false);
                SocketAddress remote = new InetSocketAddress(host, port);
                sc.register(this.selector, SelectionKey.OP_CONNECT, new R(sc, cb));
                sc.connect(remote);
            } catch (Throwable t) {
                cb.onError(this, t);
            }
        } else {
            this.addTimeout(new Callback.Timeout() {

                @org.checkerframework.dataflow.qual.Impure
                public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop) {
                    TCPClientLoop.this.createTCPClient(cb, host, port);
                }
            });
        }
    }

    /**
     * Used to create a TCPClient from a SocketChannel (typically received by a
     * server accepting connections)
     */
    @org.checkerframework.dataflow.qual.Impure
    public void createTCPClient(final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient cb, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc) {
        if (this.isLoopThread()) {
            try {
                if (null == sc) {
                    cb.onError(this, "channel is null");
                    return;
                }
                if (!sc.isConnected()) {
                    cb.onError(this, "channel not connected!");
                    return;
                }
                if (sc.isBlocking()) {
                    sc.configureBlocking(false);
                    if (sc.isBlocking()) {
                        cb.onError(this, "can't make channel non-blocking");
                        return;
                    }
                }
                sc.register(this.selector, SelectionKey.OP_READ, new R(sc, cb));
            } catch (Throwable t) {
                cb.onError(this, t);
            }
        } else {
            this.addTimeout(new Callback.Timeout() {

                @org.checkerframework.dataflow.qual.Impure
                public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop l) {
                    TCPClientLoop.this.createTCPClient(cb, sc);
                }
            });
        }
    }

    /**
     * Utility, avoid if possible! slowish
     *
     * The `write` methods don't make copy of the data passed to them, so as soon
     * data is passed to `write` it must remain untouch because it is place on the
     * write queue as is.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void write(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient cb,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull byte @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] bytes) {
        write(sc, cb, ByteBuffer.wrap(bytes));
    }

    /**
     *  Used to write to a client.
     *
     *  The `write` methods don't make copy of the data passed to them, so as soon
     *  data is passed to `write` it must remain untouch because it is place on the
     *  write queue as is.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void write(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient cb, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer buffer) {
        if (!sc.isConnected() || !sc.isOpen() || sc.socket().isClosed() || sc.socket().isOutputShutdown()) {
            cb.onError(this, sc, new RuntimeException("channel not open or shutdown"));
            return;
        }
        if (this.isLoopThread()) {
            SelectionKey key = sc.keyFor(this.selector);
            if (null == key) {
                cb.onError(this, sc, new RuntimeException("not a previously configured channel!"));
            } else {
                key.interestOps(key.interestOps() | SelectionKey.OP_WRITE);
                R r = (R) key.attachment();
                if (!(r.closePending || sc.socket().isOutputShutdown())) {
                    r.push(buffer);
                } else {
                    cb.onError(this, sc, new RuntimeException("channel no longer writable"));
                }
            }
            return;
        }
        this.addTimeout(new Callback.Timeout() {

            @org.checkerframework.dataflow.qual.Impure
            public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop) {
                ((TCPClientLoop) loop).write(sc, cb, buffer);
            }
        });
        return;
    }

    public enum Shutdown {

        SHUT_RD, SHUT_WR, SHUT_RDWR
    }

    /**
     * shutdown the SocketChannel, this tries to follow posix behaviour in that
     * any data queued to be sent or received will be discarded. This definately applies
     * for the application level data queues, and _should_ also apply to data stored
     * in the OS TCP buffers.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void shutdown(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient cb, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Shutdown how) {
        switch(how) {
            case SHUT_WR:
                shutdownOutput(sc, cb);
                break;
            case SHUT_RD:
                shutdownInput(sc, cb);
                break;
            case SHUT_RDWR:
                shutdownOutput(sc, cb);
                shutdownInput(sc, cb);
        }
    }

    /**
     * @see shutdown
     */
    @org.checkerframework.dataflow.qual.Impure
    public void shutdownOutput(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient cb) {
        if (!sc.isConnected() || !sc.isOpen() || sc.socket().isClosed() || sc.socket().isOutputShutdown()) {
            return;
        }
        if (this.isLoopThread()) {
            try {
                sc.socket().shutdownOutput();
            } catch (IOException ioe) {
                cb.onError(this, sc, ioe);
            }
            return;
        }
        //
        // else
        //
        this.addTimeout(new Callback.Timeout() {

            @org.checkerframework.dataflow.qual.Impure
            public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop) {
                // TODO cancel all write operations, or check.
                shutdownOutput(sc, cb);
            }
        });
    }

    /**
     * @see shutdown
     */
    @org.checkerframework.dataflow.qual.Impure
    public void shutdownInput(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient cb) {
        if (!sc.isConnected() || !sc.isOpen() || sc.socket().isClosed() || sc.socket().isInputShutdown()) {
            return;
        }
        if (this.isLoopThread()) {
            try {
                sc.socket().shutdownInput();
            } catch (IOException ioe) {
                cb.onError(this, sc, ioe);
            }
            return;
        }
        //
        // else
        //
        this.addTimeout(new Callback.Timeout() {

            @org.checkerframework.dataflow.qual.Impure
            public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop) {
                // TODO cancel all write operations, or check.
                shutdownInput(sc, cb);
            }
        });
    }

    /**
     * closes the SocketChannel gracefully, attempting to send any remaining data queued
     * in the application queues and OS TCP buffers (probably), but will prevent any
     * further data to be sent from the channel.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void close(final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, final Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClient client) {
        if (!sc.isConnected() || !sc.isOpen() || sc.socket().isClosed()) {
            return;
        }
        if (this.isLoopThread()) {
            R r = r(sc);
            assert r != null;
            // try to (more or less) follow close/shutdown conventions:
            // `close` tries to deliver pending data (be it in app or os buffers)
            // while `shutdown` doesn't care.
            if (sc.socket().isOutputShutdown() || !r.dataPending()) {
                handleClose(sc);
            } else {
                r.closePending = true;
            }
            return;
        }
        this.addTimeout(new Callback.Timeout() {

            @org.checkerframework.dataflow.qual.Impure
            public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop l) {
                close(sc, client);
            }
        });
    }

    /**
     * Utility to retrieve Attachment from sc.
     */
    @org.checkerframework.dataflow.qual.Impure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull R r(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc) {
        SelectionKey key = sc.keyFor(this.selector);
        assert key != null;
        return (R) key.attachment();
    }

    @org.checkerframework.dataflow.qual.Impure
    void handleClose(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc) {
        //  p(">>>> handleClose"+this.getClass());
        assert this.isLoopThread();
        SelectionKey key = sc.keyFor(this.selector);
        assert key != null;
        R r = (R) key.attachment();
        assert r != null;
        key.cancel();
        try {
            sc.close();
        } catch (IOException ioe) {
            r.cb.onError(TCPClientLoop.this, sc, ioe);
        }
        if (sc.socket().isClosed()) {
            r.cb.onClose(this, sc);
        }
        //  p("<<<< handleClose"+this.getClass());
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop this) {
        // p(">>>> tick"+this.getClass());
        assert this.isLoopThread();
        if (!this.isRunning()) {
            return;
        }
        Iterator<SelectionKey> keys = this.selector.selectedKeys().iterator();
        SelectionKey key;
        while (keys.hasNext()) {
            key = keys.next();
            keys.remove();
            if (key.isValid() && key.isConnectable()) {
                // !isValid shouldn't happen here ...
                handleConnect(key);
            }
            if (key.isValid() && key.isReadable()) {
                // nor here ...
                handleRead(key);
            }
            if (key.isValid() && key.isWritable()) {
                // but read may cancel if channel is closed ... (?)
                handleWrite(key);
            }
        }
        super.go();
        // p("<<<< tick "+this.getClass());
    }

    // all data read from net goes through this buffer.
    // todo: perhaps in future allow implementation of custom
    // strategy for buffer allocation. Also determine ideal buffer size...
    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer buf = ByteBuffer.allocateDirect(65536);

    @org.checkerframework.dataflow.qual.Impure
    private void handleRead(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SelectionKey key) {
        //p(">>>> handleRead"+this.getClass());
        assert this.isLoopThread();
        assert key.isReadable();
        SocketChannel sc = (SocketChannel) key.channel();
        Callback.TCPClient cb = ((R) key.attachment()).cb;
        buf.clear();
        int i = 0;
        try {
            i = sc.read(buf);
        } catch (IOException ioe) {
            cb.onError(this, sc, ioe);
            return;
        }
        if (-1 == i) {
            key.interestOps(key.interestOps() & ~SelectionKey.OP_READ);
            // howto: differentiated b/t which direction was closed?
            cb.onEOF(this, sc);
        } else {
            buf.flip();
            cb.onData(this, sc, buf);
        }
        //p("<<<< handleRead"+this.getClass());
    }

    @org.checkerframework.dataflow.qual.Impure
    private void handleWrite(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SelectionKey key) {
        //p(">>>>>> handleWrite"+this.getClass());
        assert this.isLoopThread();
        assert key.isWritable();
        SocketChannel sc = (SocketChannel) key.channel();
        R r = (R) key.attachment();
        if (!sc.socket().isOutputShutdown()) {
            Queue<ByteBuffer> data = r.bufferList;
            ByteBuffer buffer = null;
            while (null != (buffer = data.peek())) {
                try {
                    int pos = buffer.position();
                    int num = sc.write(buffer);
                    r.cb.onWrite(this, sc, buffer, pos, num);
                } catch (IOException ioe) {
                    /*
           It seems as though there is no way to determine whether the remote
           side has closed the channel. At this point though, there's nothing
           left to do but close the connection.
          */
                    r.cb.onError(this, sc, ioe);
                    return;
                }
                if (buffer.remaining() != 0) {
                    // couldn't write the entire buffer, bail and wait for next time
                    // around.
                    return;
                }
                data.remove();
            }
            // we've written all the data, no longer interested in writing.
            key.interestOps(key.interestOps() & ~SelectionKey.OP_WRITE);
            // since there's nothing left to write, it's now safe to close in case
            // `close` was called previously.
            if (r.closePending) {
                handleClose(sc);
            }
        } else {
            r.cb.onError(this, sc, new RuntimeException("channel no longer writeable"));
        }
        //p("<<<<<< handleWrite"+this.getClass());
    }

    @org.checkerframework.dataflow.qual.Impure
    private void handleConnect(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SelectionKey key) {
        assert this.isLoopThread();
        assert key.isConnectable();
        SocketChannel sc = (SocketChannel) key.channel();
        Callback.TCPClient cb = ((R) key.attachment()).cb;
        try {
            sc.finishConnect();
            cb.onConnect(this, sc);
        } catch (IOException ioe) {
            cb.onError(this, sc, ioe);
            return;
        }
        int io = key.interestOps();
        io |= SelectionKey.OP_READ;
        io &= ~SelectionKey.OP_CONNECT;
        key.interestOps(io);
    }

    /**
     * TODO: currently not graceful,
     * this is the emerency brake.
     */
    @org.checkerframework.dataflow.qual.Impure
    private void handleCloseAllSockets() {
        for (SelectionKey key : this.selector.keys()) {
            try {
                key.channel().close();
                key.cancel();
            } catch (java.io.IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String bin(int num) {
        return Integer.toBinaryString(num);
    }

    @org.checkerframework.dataflow.qual.Impure
    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String to_s(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer buf) {
        StringBuilder b = new StringBuilder();
        while (buf.position() != buf.limit()) {
            b.append((char) buf.get());
        }
        return b.toString();
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        TCPClientLoop loop = new TCPClientLoop();
        loop.start();
        Callback.TCPClient cb = new Callback.TCPClient() {

            @org.checkerframework.dataflow.qual.Impure
            public void onConnect(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel ch) {
                p("onConnect: " + ch);
                byte[] bs = "GET / HTTP/1.1\r\n\r\n".getBytes();
                l.write(ch, this, ByteBuffer.wrap(bs));
            }

            @org.checkerframework.dataflow.qual.Impure
            public void onData(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer b) {
                p("onData: " + to_s(b));
                //l.shutdownOutput(ch, this);
                byte[] bs = "GET / HTTP/1.1\r\n\r\n".getBytes();
                l.write(sc, this, ByteBuffer.wrap(bs));
                l.close(sc, this);
                l.stopLoop();
            }

            @org.checkerframework.dataflow.qual.Impure
            public void onClose(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel ch) {
                p("closed: " + ch);
                SelectionKey key = ch.keyFor(l.selector);
                p(key);
            }
        };
        loop.createTCPClient(cb, args[0], 80);
    }

    class R {

        @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel channel;

        Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull TCPClient cb;

        @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Queue<ByteBuffer> bufferList;

         @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean closePending;

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.cb" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.SideEffectFree
        R(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c, Callback.@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable TCPClient cb) {
            this.channel = c;
            this.cb = cb;
            this.bufferList = new LinkedList<ByteBuffer>();
        }

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.cb" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.Impure
        void push(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer buffer) {
            this.bufferList.add(buffer);
        }

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.cb" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.Pure
         @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean dataPending() {
            return this.bufferList.size() != 0;
        }
    }
}
