package event.util;

import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.Iterator;
import java.util.Random;
import java.nio.ByteBuffer;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class BufferPool {

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int maxFree = 50;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numAllocated;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numDestroyed;

    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Random rnd = new Random();

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PriorityQueue<ByteBuffer> q;

    class ByteBufferCapComp implements Comparator<ByteBuffer> {

        @org.checkerframework.dataflow.qual.Impure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int compare(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBufferCapComp this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer b1, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer b2) {
            if (b1.capacity() == b2.capacity()) {
                return 0;
            }
            if (b1.capacity() < b2.capacity()) {
                return -1;
            }
            return 1;
        }
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public BufferPool() {
        this.q = new PriorityQueue<ByteBuffer>(maxFree, new ByteBufferCapComp());
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer get( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int minCapacity) {
        ByteBuffer ret = null;
        for (Iterator<ByteBuffer> it = this.q.iterator(); it.hasNext(); ) {
            ByteBuffer buf = it.next();
            if (buf.capacity() >= minCapacity) {
                ret = buf;
                it.remove();
                break;
            }
        }
        if (ret == null) {
            p("allocated: " + (numAllocated++));
        }
        // TODO: remove this, was a debug helper to posiively identify buffers, because
        // `equals` and `hashCode` is thoroughly broken.
        ret = (ret == null) ? ByteBuffer.allocate(minCapacity + (Math.abs(rnd.nextInt()) % 100)) : (ByteBuffer) ret.clear();
        return ret;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void putBack(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer buf) {
        assert buf.remaining() == 0;
        this.q.add(buf);
        if (this.q.size() > this.maxFree) {
            this.q.poll();
            p("destroyed: " + (numDestroyed++) + ":" + this.q.size());
        } else {
            p("stat : " + this.q.size() + ":" + this.maxFree);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    static void p(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object m) {
        System.out.println(m);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        ByteBuffer[] b = new ByteBuffer[1];
        b[0] = ByteBuffer.allocate(100);
        p(b);
    }
}
