package org.delaunay.algorithm;

import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.delaunay.model.Edge;
import org.delaunay.model.Triangle;
import org.delaunay.model.Vector;
import org.delaunay.model.Vectors;
import org.delaunay.model.Vertex;
import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

/**
 * A fast Delaunay Triangulation implementation.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public strictfp class Triangulation {

    public static class NonDelaunayException extends RuntimeException {
    }

    public static class InvalidVertexException extends Exception {
    }

    public static interface DebugLogger {

        @org.checkerframework.dataflow.qual.Impure
        public void debug(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String str);
    }

    public static enum VertexExceptionStrategy {

        THROW_EXCEPTION, CATCH_AND_DROP_VERTEX
    }

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] superVerts = new Vertex[] {};

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedHashSet<Triangle> triangles = Sets.newLinkedHashSet();

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedHashSet<Vertex> inputVertices = Sets.newLinkedHashSet();

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedHashSet<Vertex> vertices = Sets.newLinkedHashSet();

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Triangle lastLocatedTriangle = null;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int hopCount = 0;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int locateCount = 0;

    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean keepSuperTriangle = false;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull VertexExceptionStrategy vertexExceptionStrategy = VertexExceptionStrategy.THROW_EXCEPTION;

    /*
	 * The hilbert order determines the granularity of the hilbert curve. For
	 * example, a value of 16 produces a square with with length and width 2^16,
	 * resulting in 2^16 * 2^16 = 2^32 cells. This is typically good enough for
	 * a triangulation up to 4 Billion vertices. Running time for coordinate
	 * conversion would be O(16).
	 */
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int hilbertOrder = 16;

    /*
	 * Determines the scale of the super triangle. Increase this number if you
	 * need to vertex locates from farther out from the bounding box of the
	 * vertices.
	 */
    private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double superTriangleScale = 2.0;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DebugLogger log = new DebugLogger() {

        @org.checkerframework.dataflow.qual.SideEffectFree
        public void debug(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String str) {
            // null implementation
        }
    };

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getHopCount() {
        return hopCount;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getLocateCount() {
        return locateCount;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setDebugLogger(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DebugLogger log) {
        this.log = log;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex addVertex(double x, double y) {
        Vertex vertex = new Vertex(x, y);
        inputVertices.add(vertex);
        return vertex;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void addVertex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex v) {
        inputVertices.add(v);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void addAllVertices(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterable<Vertex> vs) {
        Iterables.addAll(inputVertices, vs);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedHashSet<Vertex> getInputVertices() {
        return inputVertices;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedHashSet<Vertex> getVertices() {
        return vertices;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Vertex> getVerticesInBounds(final Rectangle2D rect) {
        return Lists.newArrayList(Iterables.filter(getVertices(), new Predicate<Vertex>() {

            @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
            @org.checkerframework.dataflow.qual.Impure
            public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean apply(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Vertex v) {
                return rect.contains(v.toPoint());
            }
        }));
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull LinkedHashSet<Triangle> getTriangles() {
        return triangles;
    }

    /**
     * If set to true, the supertriangle will not be removed at the end of the
     * triangulation method. This allows points outside the convex hull of
     * vertices to be located.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void setKeepSuperTriangle( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean keepSuperTriangle) {
        this.keepSuperTriangle = keepSuperTriangle;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Vertex locateNearestVertex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector v) {
        Triangle located = locate(v);
        if (located == null) {
            return null;
        }
        Vertex bestVertex = null;
        double dist = Double.MAX_VALUE;
        for (Triangle tri : getCircumcircleTriangles(v, located)) {
            for (Vertex vert : tri.getVertices()) {
                double d = vert.subtract(v).lengthSquared();
                if (d < dist) {
                    bestVertex = vert;
                    dist = d;
                }
            }
        }
        return bestVertex;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<Vertex> getVerticesInRadius(Vertex v, double radius) {
        Set<Vertex> checked = Sets.newHashSet(v);
        Set<Vertex> inRadius = Sets.newHashSet(v);
        Set<Vertex> toCheck = Sets.newHashSet(v.getNeighborVertices());
        while (toCheck.size() > 0) {
            Vertex check = Iterables.getFirst(toCheck, null);
            toCheck.remove(check);
            checked.add(check);
            if (v.subtract(check).length() < radius) {
                inRadius.add(check);
                toCheck.addAll(check.getNeighborVertices());
                toCheck.removeAll(checked);
            }
        }
        return inRadius;
    }

    /**
     * Creates a Delaunay Triangulation of the {@link Vertex}s.
     *
     * This implementation uses a simple iterative approach, but with some
     * pre-processing to make the real-world performance fast.
     *
     * First, the vertices are sorted using a Hilbert Space-Filling curve. Since
     * our locate method walks the triangulation, linearizing the points with a
     * space-filling curve gives us some pretty good locality when adding each
     * vertex, thus greatly reducing the number of hops required to locate the
     * vertex. The sort is O(n log n), but is fast since hilbert indices are
     * computed in O(h) (where h is a small constant), and results in a
     * triangulation asymptotic running time of O(n) for non-diabolical cases.
     * For more info, see: {@link http://en.wikipedia.org/wiki/Hilbert_curve}
     *
     * For each vertex, we walk to the enclosing triangle. We create a cavity
     * from that triangle and all neighboring triangles for which the vertex is
     * in their circumcircle.
     *
     * Then, we create new triangles between the edges of the cavity and the
     * vertex.
     *
     * We guarantee that a triangle will be located for each vertex by first
     * creating a "super triangle" that is at least twice as large as the bounds
     * of the vertices. If this triangulation will be used for point location,
     * you will want to call {@link #setKeepSuperTriangle(true)} so that points
     * outside the convex hull of vertices may also be located.
     *
     * Basic incremental triangulation method inspired by Paul Bourke's notes
     * and psuedocode. See: {@link http://paulbourke.net/papers/triangulate/}
     *
     * @throws InvalidVertexException
     *             if any two vertices have the same location or if any three
     *             points are co-linear.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void triangulate() throws InvalidVertexException {
        /*
    	 * Reset triangulation state
    	 */
        resetTriangulation();
        if (Iterables.isEmpty(inputVertices)) {
            return;
        }
        /*
		 * Determine the supertriangle.
		 */
        createSuperTriangle(inputVertices);
        /*
		 * Sort vertices using hilbert curve to linearize triangulation
		 * performance.
		 */
        log.debug("Linearizing with Hilbert Space-filling Curve");
        List<Vertex> sortedVertices = getHilbertSortedVertices(inputVertices);
        /*
		 * Add vertices one at a time, updating the triangulation as we go.
		 */
        log.debug("Building Triangulation");
        for (Vertex vertex : sortedVertices) {
            try {
                addVertexToTriangulation(vertex);
            } catch (InvalidVertexException e) {
                if (vertexExceptionStrategy == VertexExceptionStrategy.THROW_EXCEPTION) {
                    throw e;
                } else {
                    // ignore
                }
            }
        }
        /*
		 * Cleanup
		 */
        clearLocator();
        if (!keepSuperTriangle) {
            removeSuperTriangle();
        }
        log.debug("Triangulation Complete");
    }

    @org.checkerframework.dataflow.qual.Impure
    public void clear() {
        resetTriangulation();
        inputVertices = Sets.newLinkedHashSet();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.lastLocatedTriangle" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.dataflow.qual.Impure
    private void resetTriangulation() {
        triangles = Sets.newLinkedHashSet();
        vertices = Sets.newLinkedHashSet();
        clearLocator();
    }

    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Vertex> getHilbertSortedVertices(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterable<? extends Vertex> verts) {
        Rectangle2D bbox = Vectors.boundingBox(Lists.newArrayList(superVerts));
        ScaledHilbertIndex hilbert = new ScaledHilbertIndex(hilbertOrder, bbox);
        for (Vertex v : verts) {
            v.setHilbertIndex(hilbert.toIndex(v.x, v.y));
        }
        List<Vertex> sortedVertices = Lists.newArrayList(verts);
        Collections.sort(sortedVertices, new Comparator<Vertex>() {

            @org.checkerframework.dataflow.qual.Pure
            public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int compare(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex v1, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex v2) {
                return v1.getHilbertIndex().compareTo(v2.getHilbertIndex());
            }
        });
        return sortedVertices;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void addVertexToTriangulation(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex vertex) throws InvalidVertexException {
        Collection<Triangle> toRemove = null, toAdd = null;
        try {
            /*
			 * Get the set of triangles for which the vertex lies in its
			 * circumcircle.
			 */
            toRemove = getCircumcircleTriangles(vertex);
        } catch (NonDelaunayException e) {
            /*
			 * Unfortunately, we cannot recover from this state since the
			 * triangulation is already non-delaunay. It was probably caused
			 * by overlapping vertices, so we throw an invalid vertex
			 * exception.
			 */
            throw new InvalidVertexException();
        } catch (InvalidVertexException e) {
            log.debug(String.format("Dropping vertex %s because it outside the triangulation!\nMaybe something went wrong when computing the super triangle?", vertex));
            return;
        }
        /*
		 * Compute the set of edges that represent the convex hull of the
		 * cavity left by removing the triangles.
		 */
        List<Edge> edgeSet = getEdgeSet(toRemove);
        /*
		 * Remove the triangles.
		 */
        removeTriangles(toRemove);
        try {
            /*
			 * Create and add triangles created from the cavity convex hull
			 * edges and the vertex.
			 */
            toAdd = createTriangles(edgeSet, vertex);
            addTriangles(toAdd);
            vertices.add(vertex);
        } catch (NonDelaunayException e) {
            log.debug(String.format("Dropping vertex %s because it causes degeneracy.\nYou may need to use exact math on this vertex.", vertex));
            removeTriangles(toAdd);
            addTriangles(toRemove);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void createSuperTriangle(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterable<? extends Vertex> verts) {
        createSuperTriangle(Vectors.boundingBox(verts));
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.dataflow.qual.Impure
    public void createSuperTriangle(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Rectangle2D rect) {
        double dmax = Math.max(rect.getWidth(), rect.getHeight());
        double xmid = rect.getCenterX();
        double ymid = rect.getCenterY();
        superVerts = new Vertex[] { new Vertex(xmid - dmax * superTriangleScale, ymid - dmax), new Vertex(xmid, ymid + dmax * superTriangleScale), new Vertex(xmid + dmax * superTriangleScale, ymid - dmax) };
        triangles = Sets.newLinkedHashSet();
        triangles.add(new Triangle(superVerts[0], superVerts[1], superVerts[2]));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.lastLocatedTriangle" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.lastLocatedTriangle" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.dataflow.qual.Impure
    public void removeSuperTriangle() {
        Set<Triangle> touching = Sets.newHashSet();
        for (Vertex v : superVerts) {
            touching.addAll(v.getNeighborTriangles());
        }
        removeTriangles(touching);
        superVerts = new Vertex[] {};
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean touchesSuperVertex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Triangle tri) {
        for (Vertex v : superVerts) {
            if (tri.getVertices().contains(v)) {
                return true;
            }
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean neighborsSuperVertex(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex vert) {
        for (Triangle tri : vert.getNeighborTriangles()) {
            if (touchesSuperVertex(tri)) {
                return true;
            }
        }
        if (Sets.newHashSet(superVerts).contains(vert)) {
            return true;
        }
        return false;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.lastLocatedTriangle" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.dataflow.qual.Impure
    private void clearLocator() {
        lastLocatedTriangle = null;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Collection<Triangle> getCircumcircleTriangles(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector vertex) throws InvalidVertexException, NonDelaunayException {
        Triangle t = locate(vertex);
        if (t == null) {
            throw new InvalidVertexException();
        }
        return getCircumcircleTriangles(vertex, t);
    }

    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Collection<Triangle> getCircumcircleTriangles(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector vertex, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Triangle t) {
        Set<Triangle> checked = Sets.newHashSet(t);
        Set<Triangle> inCircum = Sets.newHashSet(t);
        // Initialize "to check" set with neighbors
        Set<Triangle> toCheck = Sets.newHashSet(t.getNeighbors());
        // For first triangle in "to check" set, check if
        // the vertex is in its circum circle.
        while (toCheck.size() > 0) {
            t = Iterables.getFirst(toCheck, null);
            toCheck.remove(t);
            if (t.isInCircum(vertex)) {
                inCircum.add(t);
                // If it is, add *its* neighbors to the "to check" set.
                toCheck.addAll(t.getNeighbors());
                toCheck.removeAll(checked);
            }
            checked.add(t);
        }
        return inCircum;
    }

    /*
	 * Walks the triangulation toward the vertex. Returns the triangle in which
	 * the vertex resides. If the vertex is outside the current triangulation,
	 * nil is returned.
	 * 
	 * It is possible that if the triangulation breaks due to floating point
	 * errors, it will cause errors during locate. In this case, we throw a
	 * NonDelaunayException.
	 * 
	 * If the vertices are near each other, such as when iterating over a
	 * hilbert linearization or running a scanline of locations, this should be
	 * pretty fast.
	 */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Triangle locate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector v) throws NonDelaunayException {
        locateCount += 1;
        Triangle t = lastLocatedTriangle == null ? Iterables.getFirst(triangles, null) : lastLocatedTriangle;
        if (t == null) {
            return null;
        }
        boolean done = false;
        Set<Triangle> seen = Sets.<Triangle>newHashSet();
        while (!done) {
            hopCount += 1;
            lastLocatedTriangle = t;
            if (seen.contains(t)) {
                throw new NonDelaunayException();
            }
            seen.add(t);
            Triangle tNext = t.nextWalk(v);
            if (tNext == null) {
                return null;
            }
            done = (tNext == t);
            t = tNext;
        }
        /*
		 * During triangulation the located triangle is immediately removed.
		 * But, it can be useful to store this if we are locating points in the
		 * triangulation after it's constructed.
		 */
        lastLocatedTriangle = t;
        return t;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Edge> getEdgeSet(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Collection<Triangle> tris) {
        List<Edge> edges = Lists.newArrayList();
        for (Triangle t : tris) {
            for (Edge e : t.getEdges()) {
                if (edges.contains(e)) {
                    edges.remove(e);
                } else {
                    edges.add(e);
                }
            }
        }
        return edges;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Triangle> createTriangles(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterable<Edge> edgeSet, final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex vertex) {
        return Lists.newArrayList(Iterables.transform(edgeSet, new Function<Edge, Triangle>() {

            @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
            @org.checkerframework.dataflow.qual.Pure
            public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Triangle apply(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Edge e) {
                return new Triangle(vertex, e.a, e.b);
            }
        }));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.lastLocatedTriangle" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.lastLocatedTriangle" })
    @org.checkerframework.dataflow.qual.Impure
    private void addTriangles(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Iterable<Triangle> tris) throws NonDelaunayException {
        for (Triangle t : tris) {
            for (Vertex v : t.getVertices()) {
                v.addTriangle(t);
            }
            triangles.add(t);
        }
        lastLocatedTriangle = Iterables.getFirst(tris, null);
        // uncomment to debug robustness issues at the cost of performance
        // triangles.each { |t| raise NonDelaunayException unless t.delaunay? }
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.lastLocatedTriangle" }, qualifier = org.checkerframework.checker.initialization.qual.FBCBottom.class)
    @org.checkerframework.dataflow.qual.Impure
    private void removeTriangles(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Iterable<Triangle> tris) {
        for (Triangle t : tris) {
            for (Vertex v : t.getVertices()) {
                v.removeTriangle(t);
            }
            triangles.remove(t);
        }
        lastLocatedTriangle = null;
    }
}
