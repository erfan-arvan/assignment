package be.demmel.fun.jgwcaconstants.bll;

import java.util.HashMap;
import java.util.Map;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public enum WeaponType {

    BOW((short) 1),
    AXE((short) 2),
    HAMMER((short) 3),
    DAGGERS((short) 4),
    SCYTHE((short) 5),
    SPEAR((short) 6),
    SWORD((short) 7),
    WAND((short) 10);

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<Short, WeaponType> SHORT_TO_WEAPON_TYPE_MAP = new HashMap<Short, WeaponType>();

    static {
        for (WeaponType operation : WeaponType.values()) {
            SHORT_TO_WEAPON_TYPE_MAP.put(operation.skillTypeId, operation);
        }
    }

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull short skillTypeId;

    @org.checkerframework.dataflow.qual.Impure
    private WeaponType( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull short skillTypeId) {
        this.skillTypeId = skillTypeId;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull short getSkillTypeId() {
        return skillTypeId;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable WeaponType toEnum( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull short value) {
        return SHORT_TO_WEAPON_TYPE_MAP.get(value);
    }
}
