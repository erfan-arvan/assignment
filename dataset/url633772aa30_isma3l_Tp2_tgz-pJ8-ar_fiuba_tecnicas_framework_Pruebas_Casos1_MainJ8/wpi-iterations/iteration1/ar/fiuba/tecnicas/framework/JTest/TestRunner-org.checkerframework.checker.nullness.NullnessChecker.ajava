package ar.fiuba.tecnicas.framework.JTest;

import ar.fiuba.tecnicas.framework.ArgumentValidator;
import ar.fiuba.tecnicas.framework.Usage;
import com.sun.javaws.exceptions.InvalidArgumentException;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.PatternSyntaxException;

/*
 Responsabilidad: Crear y correr test ya definidos o un grupo de test definidios filtrado con expresiones regulares
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TestRunner {

    public static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int SUCCESS_EXIT = 0;

    public static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int FAILURE_EXIT = 1;

    public static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int EXCEPTION_EXIT = 2;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ResultPrinter resultPrinter;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String regexpTestcase;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String regexpTestsuite;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> argtags;

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull TestCreator testCreator;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public TestRunner() {
        this.resultPrinter = new ResultPrinter(System.out);
        regexpTestcase = "";
        regexpTestsuite = "";
        argtags = new ArrayList<String>();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void setListener(TestListener listener) {
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setRegexpTestcase(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String regexpTestcase) {
        this.regexpTestcase = regexpTestcase;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setRegexpTestsuite(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String regexpTestsuite) {
        this.regexpTestsuite = regexpTestsuite;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setArgtags(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<String> argtags) {
        this.argtags = argtags;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void setCreatorTest(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TestCreator testCreator) {
        TestRunner.testCreator = testCreator;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] args) {
        try {
            TestRunner testRunner = new TestRunner();
            ArgumentValidator argvalidate = new ArgumentValidator(testRunner, args);
            argvalidate.start();
            TestReport testreport = testRunner.start();
            if (!testreport.wasSuccessful()) {
                System.exit(FAILURE_EXIT);
            }
            System.exit(SUCCESS_EXIT);
        } catch (InvalidArgumentException badarg) {
            Usage usage = new Usage();
            System.err.println(usage);
            System.exit(EXCEPTION_EXIT);
        } catch (PatternSyntaxException patternexcp) {
            System.err.println("Invalid regular expression 's syntax");
            System.exit(EXCEPTION_EXIT);
        } catch (Throwable e) {
            System.err.println(e.getMessage());
            System.exit(EXCEPTION_EXIT);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Test getTest() throws Exception {
        return testCreator.getTest();
    }

    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TestReport start() throws Throwable {
        Test test = getTest();
        return doRun(test);
    }

    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TestReport doRun(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Test suite) throws Throwable {
        TestReport result = createTestReport();
        suite.run(result);
        resultPrinter.printFooter(result);
        return result;
    }

    @org.checkerframework.dataflow.qual.Impure
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TestReport createTestReport() {
        TestReport result = new TestReport();
        result.setRecognizerExpressionsTestcase(new PatternRecognizer(regexpTestcase));
        result.setRecognizerExpressionsTestsuite(new PatternRecognizer(regexpTestsuite));
        result.setRecognizerTag(new RecognizerTag(argtags));
        result.addListener(resultPrinter);
        result.addListener(new XmlPrinter());
        return result;
    }
}
