package net.slreynolds.ds.model;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 */
// ---------- Generated --------------------
// TODO some subclasses are value objects and some are not
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
abstract public class Named {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<String, Object> _attributes;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String _name;

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int _ID;

    /**
     * Denote that this Named is anonymous
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String EMPTY_NAME = "NO NAME SPECIFIED";

    /**
     * Key for class
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String CLASS = "Class";

    /**
     * Key for value
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String VALUE = "Value";

    /**
     * Key for label
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String LABEL = "Label";

    /**
     * Key for System hash
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String SYSTEM_HASH = "SystemHash";

    /**
     * Key for array index
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String ARRAY_INDEX = "ArrayIndex";

    /**
     * Key to make this element invisible when exported or displayed
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String HIDDEN = "Hidden";

    /**
     * Key to  make this element a symbol
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String SYMBOL = "Symbol";

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#2" })
    @org.checkerframework.dataflow.qual.SideEffectFree
    public Named(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NamedID ID, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String name) {
        if (name == null) {
            throw new IllegalArgumentException("Cannot use null for a name");
        }
        if (name.length() <= 0) {
            throw new IllegalArgumentException("Name length must be positive");
        }
        _name = name;
        _ID = ID.asInt();
        _attributes = new HashMap<String, Object>();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Named(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NamedID ID) {
        _name = EMPTY_NAME;
        _ID = ID.asInt();
        _attributes = new HashMap<String, Object>();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isAnonymous() {
        return _name.equals(EMPTY_NAME);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getID() {
        return _ID;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean hasID() {
        return (_ID > 0);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getName() {
        return _name;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object getAttr(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String key) {
        return _attributes.get(key);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean hasAttr(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String key) {
        return _attributes.containsKey(key);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Named putAttr(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String key, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
        _attributes.put(key, value);
        return this;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Named removeAttr(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String key) {
        _attributes.remove(key);
        return this;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<String> getAttrKeys() {
        return _attributes.keySet();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String attrToString() {
        return attrToString(_attributes.size() + 1);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String attrToString( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numAttr) {
        StringBuilder sb = new StringBuilder("{");
        Set<Map.Entry<String, Object>> entries = _attributes.entrySet();
        int i = 0;
        for (Map.Entry<String, Object> entry : entries) {
            i++;
            if (i > numAttr) {
                break;
            }
            if (i != 1) {
                sb.append(", ");
            }
            sb.append(entry.getKey());
            sb.append('=');
            sb.append(entry.getValue());
        }
        sb.append('}');
        return sb.toString();
    }
}
