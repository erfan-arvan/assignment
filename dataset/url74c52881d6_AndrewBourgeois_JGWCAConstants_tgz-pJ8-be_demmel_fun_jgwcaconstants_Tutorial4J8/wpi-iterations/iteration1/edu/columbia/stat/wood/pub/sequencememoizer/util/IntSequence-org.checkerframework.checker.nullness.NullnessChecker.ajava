/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.columbia.stat.wood.pub.sequencememoizer.util;

import edu.columbia.stat.wood.pub.sequencememoizer.IntSequenceMemoizer.NewKey;
import gnu.trove.set.hash.THashSet;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Collection;

/**
 * Class which implements an int sequence as a linked list to facilitate easy
 * deletion of the start of the sequence.
 * @author nicholasbartlett
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class IntSequence implements Serializable {

    static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long serialVersionUID = 1;

    private int nodeSize, index, length;

    private IntSeqNode first, last;

    /**
     * Constructor specifying the size of the int[] housed in each node of the linked list.
     * @param nodeSize
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public IntSequence( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int nodeSize) {
        this.nodeSize = nodeSize;
        first = new IntSeqNode(null, null, nodeSize);
        last = first;
        index = nodeSize - 1;
        length = 0;
    }

    /**
     * Gets the node size.
     * @return size of int[] in each node
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int blockSize() {
        return nodeSize;
    }

    /**
     * Appends the int i to the sequence.
     * @param i int to append
     */
    @org.checkerframework.dataflow.qual.Impure
    public void append( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int i) {
        if (index < 0) {
            last.next = new IntSeqNode(last, null, nodeSize);
            last = last.next;
            index = nodeSize - 1;
        }
        length++;
        last.intChunk[index--] = i;
    }

    /**
     * Get total length of the sequence.
     * @return length
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length() {
        return length;
    }

    /**
     * Shorten the sequence by deleting the earliest node and all the restaurant
     * nodes in the model which point to it.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void shorten(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull MutableLong restCount) {
        for (IntRestaurant r : first) {
            r.removeFromTree(restCount);
        }
        length -= nodeSize;
        first = first.next;
        first.previous = null;
    }

    /**
     * Get an iterator object to traverse the sequence backwards.
     * @return iterator
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BackwardsIterator backwardsIterator() {
        return new BackwardsIterator();
    }

    /**
     * Get the overlap between a context, starting at a specified index, and the
     * sequence, starting at a specified index and node.
     * @param edgeNode node
     * @param edgeIndex index within node
     * @param edgeLength length of edge in model, overlap must be less than or equal to this number
     * @param context context we are comparing to
     * @param index index into context pointing to current context location
     * @return number of overlapping context elements
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int overlap(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable IntSeqNode edgeNode,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int edgeIndex,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int edgeLength,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] context,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int index) {
        int overlap = 0;
        while (edgeNode != null && overlap < edgeLength && index > -1 && edgeNode.intChunk[edgeIndex] == context[index]) {
            overlap++;
            index--;
            edgeIndex++;
            if (edgeIndex >= nodeSize) {
                edgeNode = edgeNode.previous;
                if (edgeNode == null) {
                    break;
                }
                edgeIndex = 0;
            }
        }
        return overlap;
    }

    /**
     * Gets a node object given its index.
     * @param ind index
     * @return the node object
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IntSeqNode get( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int ind) {
        IntSeqNode node = first;
        for (int i = 0; i < ind; i++) {
            node = node.next;
        }
        return node;
    }

    @org.checkerframework.dataflow.qual.Impure
    private void writeObject(ObjectOutputStream out) throws IOException {
        int nodes = 0;
        IntSeqNode node = first;
        while (node != null) {
            nodes++;
            node = node.next;
        }
        out.writeInt(nodes);
        out.writeInt(nodeSize);
        out.writeInt(index);
        out.writeInt(length);
        node = first;
        while (node != null) {
            THashSet<IntRestaurant> s = new THashSet<IntRestaurant>(node);
            out.writeObject(s);
            out.writeObject(node.intChunk);
            node = node.next;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        int nodes = in.readInt();
        nodeSize = in.readInt();
        index = in.readInt();
        length = in.readInt();
        THashSet<IntRestaurant> s = (THashSet<IntRestaurant>) in.readObject();
        IntSeqNode nextNode;
        IntSeqNode node = new IntSeqNode(s);
        node.intChunk = (int[]) in.readObject();
        first = node;
        nodes--;
        while (nodes > 0) {
            s = (THashSet<IntRestaurant>) in.readObject();
            nextNode = new IntSeqNode(s);
            node.next = nextNode;
            nextNode.previous = node;
            nextNode.intChunk = (int[]) in.readObject();
            node = nextNode;
            nodes--;
        }
        last = node;
    }

    public class IntSeqNode extends THashSet<IntRestaurant> {

        private  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull [] intChunk;

        private IntSeqNode previous, next;

        @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.intChunk" })
        @org.checkerframework.dataflow.qual.Impure
        public IntSeqNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable IntSeqNode previous, @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable IntSeqNode next,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int nodeSize) {
            this.previous = previous;
            this.next = next;
            intChunk = new int[nodeSize];
        }

        @org.checkerframework.dataflow.qual.Impure
        public IntSeqNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Collection<IntRestaurant> collection) {
            super(collection);
        }

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.intChunk" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.Pure
        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IntSeqNode previous() {
            return previous;
        }

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.intChunk" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable [] intChunk() {
            return intChunk;
        }

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.intChunk" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getIndex() {
            int ind = -1;
            IntSeqNode node = this;
            while (node != null) {
                ind++;
                node = node.previous;
            }
            return ind;
        }
    }

    public class BackwardsIterator {

        public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IntSeqNode node;

        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int ind;

        @org.checkerframework.dataflow.qual.SideEffectFree
        public BackwardsIterator() {
            node = last;
            ind = index + 1;
        }

        @org.checkerframework.dataflow.qual.Impure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int peek() {
            if (ind >= nodeSize) {
                node = node.previous;
                ind = 0;
            }
            return node.intChunk[ind];
        }

        @org.checkerframework.dataflow.qual.Impure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int next() {
            if (ind >= nodeSize) {
                node = node.previous;
                ind = 0;
            }
            return node.intChunk[ind++];
        }

        @org.checkerframework.dataflow.qual.Impure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean hasNext() {
            if (ind >= nodeSize) {
                node = node.previous;
                ind = 0;
            }
            return node != null;
        }

        @org.checkerframework.dataflow.qual.Impure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int overlap(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable IntSeqNode edgeNode,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int edgeIndex,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int edgeLength, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NewKey newKey) {
            IntSeqNode ln;
            int overlap, li;
            ln = edgeNode;
            li = edgeIndex;
            overlap = 0;
            while (ln.intChunk[li] == node.intChunk[ind] && overlap < edgeLength) {
                li++;
                ind++;
                overlap++;
                if (li >= nodeSize) {
                    ln = ln.previous;
                    if (ln == null) {
                        break;
                    }
                    li = 0;
                }
                if (ind >= nodeSize) {
                    node = node.previous;
                    ind = 0;
                }
            }
            if (ln != null) {
                newKey.set(ln.intChunk[li]);
            } else {
                newKey.setNull();
            }
            return overlap;
        }

        @org.checkerframework.dataflow.qual.Pure
        public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int available( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int l) {
            int available = nodeSize - ind;
            if (available > l) {
                return l;
            } else {
                IntSeqNode n = node.previous;
                while (n != null) {
                    available += nodeSize;
                    if (available > l) {
                        return l;
                    }
                    n = n.previous;
                }
                return available;
            }
        }
    }
}
