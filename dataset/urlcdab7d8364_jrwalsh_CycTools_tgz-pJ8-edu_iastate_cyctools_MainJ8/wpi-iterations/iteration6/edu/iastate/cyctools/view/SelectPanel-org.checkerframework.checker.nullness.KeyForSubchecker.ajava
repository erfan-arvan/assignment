package edu.iastate.cyctools.view;

import java.beans.PropertyChangeEvent;
import edu.iastate.cyctools.DefaultController;
import edu.iastate.cyctools.InternalStateModel.State;
import edu.iastate.cyctools.externalSourceCode.AbstractViewPanel;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JLabel;
import java.awt.event.ActionEvent;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionListener;
import net.miginfocom.swing.MigLayout;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class SelectPanel extends AbstractViewPanel {

     DefaultController controller;

    private final  Action actionSelectFrameBrowser = new ActionSelectFrameBrowser();

    private final  Action actionSelectExportPanel = new ActionSelectExportPanel();

    private final  Action actionSelectSearchPanel = new ActionSelectSearchPanel();

    private final  Action actionExportStructurePanel = new ActionExportStructurePanel();

    private final  Action actionComparePanel = new ActionComparePanel();

    private final  Action actionLoad = new ActionLoad();

    /**
     * Create the frame.
     * @param controller
     */
    @org.checkerframework.dataflow.qual.Impure
    public SelectPanel( DefaultController controller) {
        this.controller = controller;
        initComponents();
        localInitialization();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void localInitialization( SelectPanel this) {
        //Add self as property change event listener of the controller
        controller.addView(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    private void initComponents( SelectPanel this) {
        JButton btnFrameBrowse = new JButton("Frame Browse");
        btnFrameBrowse.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent arg0) {
            }
        });
        btnFrameBrowse.setMargin(new Insets(2, 2, 2, 2));
        btnFrameBrowse.setAction(actionSelectFrameBrowser);
        JLabel lblFrameInspect = new JLabel("<html>View the contents of a data frame as text</html>");
        setLayout(new MigLayout("", "[grow][101px][25px][224px][grow]", "[grow][84px][25.00][84px][grow]"));
        add(btnFrameBrowse, "cell 1 1,grow");
        add(lblFrameInspect, "cell 3 1,grow");
        JButton btnLoadData = new JButton("Load Data");
        btnLoadData.setAction(actionLoad);
        btnLoadData.setMargin(new Insets(2, 2, 2, 2));
        add(btnLoadData, "cell 1 3,grow");
        JLabel lblloadASpreadsheet = new JLabel("<html>Load a data file into the database.</html>");
        add(lblloadASpreadsheet, "cell 3 3,grow");
    }

    private class ActionSelectFrameBrowser extends AbstractAction {

        @org.checkerframework.dataflow.qual.Impure
        public ActionSelectFrameBrowser() {
            putValue(NAME, "<html><center>Frame Viewer</center></html>");
            putValue(SHORT_DESCRIPTION, "Open the Frame Browser screen.");
        }

        @org.checkerframework.dataflow.qual.Impure
        public void actionPerformed( ActionSelectFrameBrowser this,  ActionEvent e) {
            controller.setState(State.SHOW_FRAMEBROWSE);
        }
    }

    private class ActionSelectExportPanel extends AbstractAction {

        @org.checkerframework.dataflow.qual.Impure
        public ActionSelectExportPanel() {
            putValue(NAME, "<html><center>Export Frames</center></html>");
            putValue(SHORT_DESCRIPTION, "Open the export screen.");
        }

        @org.checkerframework.dataflow.qual.Impure
        public void actionPerformed( ActionSelectExportPanel this,  ActionEvent e) {
            controller.setState(State.SHOW_EXPORT);
        }
    }

    private class ActionSelectSearchPanel extends AbstractAction {

        @org.checkerframework.dataflow.qual.Impure
        public ActionSelectSearchPanel() {
            putValue(NAME, "<html><center>Bulk Search</center></html>");
            putValue(SHORT_DESCRIPTION, "Open the search screen.");
        }

        @org.checkerframework.dataflow.qual.Impure
        public void actionPerformed( ActionSelectSearchPanel this,  ActionEvent e) {
            controller.setState(State.SHOW_SEARCH);
        }
    }

    private class ActionExportStructurePanel extends AbstractAction {

        @org.checkerframework.dataflow.qual.Impure
        public ActionExportStructurePanel() {
            putValue(NAME, "<html><center>Export Structure</center></html>");
            putValue(SHORT_DESCRIPTION, "Export underlying PGDB Class and Instance structure.");
        }

        @org.checkerframework.dataflow.qual.Impure
        public void actionPerformed( ActionExportStructurePanel this,  ActionEvent e) {
            controller.setState(State.SHOW_STRUCTURE_EXPORT);
        }
    }

    private class ActionComparePanel extends AbstractAction {

        @org.checkerframework.dataflow.qual.Impure
        public ActionComparePanel() {
            putValue(NAME, "<html><center>Database Compare<br>Tool</center></html>");
            putValue(SHORT_DESCRIPTION, "Compare two PGDB databases frame by frame.");
        }

        @org.checkerframework.dataflow.qual.Impure
        public void actionPerformed( ActionComparePanel this,  ActionEvent e) {
            controller.setState(State.SHOW_DATABASE_COMPARE);
        }
    }

    private class ActionLoad extends AbstractAction {

        @org.checkerframework.dataflow.qual.Impure
        public ActionLoad() {
            putValue(NAME, "<html><center>Import<br /> Assistant</center></html>");
            putValue(SHORT_DESCRIPTION, "Load spreadsheet file into database");
        }

        @org.checkerframework.dataflow.qual.Impure
        public void actionPerformed( ActionLoad this,  ActionEvent e) {
            controller.setState(State.SHOW_IMPORT);
        }
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void modelPropertyChange( SelectPanel this,  PropertyChangeEvent evt) {
    }
}
