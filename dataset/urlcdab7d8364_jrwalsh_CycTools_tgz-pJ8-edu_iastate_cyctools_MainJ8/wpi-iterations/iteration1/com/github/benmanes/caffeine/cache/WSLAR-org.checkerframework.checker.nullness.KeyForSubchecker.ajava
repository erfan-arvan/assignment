// Copyright 2024 Ben Manes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.github.benmanes.caffeine.cache;

import org.checkerframework.checker.nullness.qual.Nullable;

/**
 * <em>WARNING: GENERATED CODE</em>
 *
 * <p>A cache that provides the following features:
 *
 * <ul>
 *   <li>RefreshWrite
 *   <li>WeakKeys (inherited)
 *   <li>StrongValues (inherited)
 *   <li>ExpireAccess (inherited)
 *   <li>Listening (inherited)
 * </ul>
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
final class WSLAR<K, V> extends WSLA<K, V> {

    static final  LocalCacheFactory FACTORY = WSLAR::new;

    volatile   long refreshAfterWriteNanos;

    @org.checkerframework.dataflow.qual.Impure
    WSLAR(Caffeine<K, V> builder, AsyncCacheLoader<? super K, V> cacheLoader, boolean async) {
        super(builder, cacheLoader, async);
        this.refreshAfterWriteNanos = builder.getRefreshAfterWriteNanos();
    }

    @org.checkerframework.dataflow.qual.Pure
    protected   boolean refreshAfterWrite( WSLAR<K, V> this) {
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected   long refreshAfterWriteNanos( WSLAR<K, V> this) {
        return refreshAfterWriteNanos;
    }

    @org.checkerframework.dataflow.qual.Impure
    protected void setRefreshAfterWriteNanos( WSLAR<K, V> this,   long refreshAfterWriteNanos) {
        this.refreshAfterWriteNanos = refreshAfterWriteNanos;
    }
}
