// Copyright 2024 Ben Manes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.github.benmanes.caffeine.cache;

import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;
import java.lang.ref.ReferenceQueue;

/**
 * <em>WARNING: GENERATED CODE</em>
 *
 * <p>A cache entry that provides the following features:
 *
 * <ul>
 *   <li>ExpireAccess
 *   <li>WeakKeys (inherited)
 *   <li>SoftValues (inherited)
 * </ul>
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
class FDA<K, V> extends FD<K, V> {

    protected static final  VarHandle ACCESS_TIME;

    static {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        try {
            ACCESS_TIME = lookup.findVarHandle(FDA.class, NodeFactory.ACCESS_TIME, long.class);
        } catch (ReflectiveOperationException e) {
            throw new ExceptionInInitializerError(e);
        }
    }

    volatile long accessTime;

     Node<K, V> previousInAccessOrder;

     Node<K, V> nextInAccessOrder;

    @org.checkerframework.dataflow.qual.Impure
    FDA() {
    }

    @org.checkerframework.dataflow.qual.Impure
    FDA(K key,  ReferenceQueue<K> keyReferenceQueue, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        super(key, keyReferenceQueue, value, valueReferenceQueue, weight, now);
        ACCESS_TIME.set(this, now);
    }

    @org.checkerframework.dataflow.qual.Impure
    FDA( Object keyReference, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        super(keyReference, value, valueReferenceQueue, weight, now);
        ACCESS_TIME.set(this, now);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Node<K, V> getPreviousInVariableOrder( FDA<K, V> this) {
        return previousInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setPreviousInVariableOrder( FDA<K, V> this,  Node<K, V> previousInAccessOrder) {
        this.previousInAccessOrder = previousInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Node<K, V> getNextInVariableOrder( FDA<K, V> this) {
        return nextInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setNextInVariableOrder( FDA<K, V> this,  Node<K, V> nextInAccessOrder) {
        this.nextInAccessOrder = nextInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Impure
    public   long getVariableTime( FDA<K, V> this) {
        return (long) ACCESS_TIME.getOpaque(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setVariableTime( FDA<K, V> this,   long accessTime) {
        ACCESS_TIME.setOpaque(this, accessTime);
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean casVariableTime( FDA<K, V> this,   long expect,   long update) {
        return (accessTime == expect) && ACCESS_TIME.compareAndSet(this, expect, update);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final   long getAccessTime( FDA<K, V> this) {
        return (long) ACCESS_TIME.getOpaque(this);
    }

    @org.checkerframework.dataflow.qual.Impure
    public final void setAccessTime( FDA<K, V> this,   long accessTime) {
        ACCESS_TIME.setOpaque(this, accessTime);
    }

    @org.checkerframework.dataflow.qual.Pure
    public final  Node<K, V> getPreviousInAccessOrder( FDA<K, V> this) {
        return previousInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Impure
    public final void setPreviousInAccessOrder( FDA<K, V> this,  Node<K, V> previousInAccessOrder) {
        this.previousInAccessOrder = previousInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Pure
    public final  Node<K, V> getNextInAccessOrder( FDA<K, V> this) {
        return nextInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Impure
    public final void setNextInAccessOrder( FDA<K, V> this,  Node<K, V> nextInAccessOrder) {
        this.nextInAccessOrder = nextInAccessOrder;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Node<K, V> newNode( FDA<K, V> this, K key,  ReferenceQueue<K> keyReferenceQueue, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        return new FDA<>(key, keyReferenceQueue, value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Node<K, V> newNode( FDA<K, V> this,  Object keyReference, V value,  ReferenceQueue<V> valueReferenceQueue,   int weight,   long now) {
        return new FDA<>(keyReference, value, valueReferenceQueue, weight, now);
    }
}
