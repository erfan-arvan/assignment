package ar.fiuba.tecnicas.framework.Pruebas.Casos1;

import ar.fiuba.tecnicas.framework.JTest.*;
import java.util.Arrays;
import static org.hamcrest.CoreMatchers.is;

/*
Responsabilidad: Controlar una serie de test creados por el usuario
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class AssertTest implements TestCreator {

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void objectComparisonEqualTest() {
        int k = 2;
        int h = 2;
        Assert.assertEquals("Objects have different value", k, h);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void assertArrayEqualsTest() {
        Double[] list1 = { 1.2, 9.8, 4.6 };
        Double[] list2 = { 1.2, 9.8, 4.6 };
        Assert.assertArrayEquals("Arrays have different value", list1, list2);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void conditionComparisonTrueTest() {
        boolean trueCondition = (2 < 3);
        Assert.assertTrue("The condition is false", trueCondition);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void conditionComparisonFalseTest() {
        boolean falseCondition = (2 < 3);
        Assert.assertFalse("The condition is true", falseCondition);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void referenceComparisonSameTest() {
        int num1 = 2;
        int num2 = num1;
        Assert.assertSame("Objects have different reference", num1, num2);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void doubleComparisonEquals() {
        double num1 = 2.32456;
        double num2 = 2.32466;
        double delta = 0.01;
        Assert.assertEquals("2.32456 is not equal to 2.32466 considering delta 0.01", num1, num2, delta);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void referenceComparisonNotSameTest() {
        int num1 = 2;
        int num2 = 6;
        Assert.assertNotSame("num1 and num2 have the same reference", num1, num2);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void nullObjectComparisonTest() {
        String chain = null;
        Assert.assertNull("Chain is not null", chain);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void notNullObjectComparisonTest() {
        String chain = "abc";
        Assert.assertNotNull("Chain is null", chain);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void assertThatTest() {
        int[] actualArray = { 1, 2, 3, 4 };
        Assert.assertThat("ActualArray size is not 4", actualArray.length, is(4));
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Test getTest(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AssertTest this) throws Exception {
        TestSuite test = new TestSuite("AssertSuite");
        test.addTest(new TestCase("objectComparisonEqualTest", Arrays.asList("SLOW", "INTERNET")) {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                objectComparisonEqualTest();
            }
        });
        test.addTest(new TestCase("assertArrayEqualsTest") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                assertArrayEqualsTest();
            }
        });
        test.addTest(new TestCase("conditionComparisonTrueTest", Arrays.asList("INTERNET")) {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                conditionComparisonTrueTest();
            }
        });
        test.addTest(new TestCase("conditionComparisonFalseTest") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                conditionComparisonFalseTest();
            }
        });
        test.addTest(new TestCase("referenceComparisonSameTest") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                referenceComparisonSameTest();
            }
        });
        test.addTest(new TestCase("doubleComparisonEquals") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                doubleComparisonEquals();
            }
        });
        test.addTest(new TestCase("referenceComparisonNotSameTest") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                referenceComparisonNotSameTest();
            }
        });
        test.addTest(new TestCase("nullObjectComparisonTest") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                nullObjectComparisonTest();
            }
        });
        test.addTest(new TestCase("notNullObjectComparisonTest") {

            @org.checkerframework.dataflow.qual.SideEffectFree
            public void runTest() {
                notNullObjectComparisonTest();
            }
        });
        test.addTest(new TestCase("assertThatTest") {

            @org.checkerframework.dataflow.qual.Impure
            public void runTest() {
                assertThatTest();
            }
        });
        return test;
    }
}
