package org.delaunay.dtfe;

import java.util.Collection;
import java.util.List;
import java.util.Set;
import org.delaunay.dtfe.DtfeTriangulationMap.ScaleType;
import org.delaunay.model.Edge;
import org.delaunay.model.Triangle;
import org.delaunay.model.Vector;
import org.delaunay.model.Vertex;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Multimap;
import com.google.common.collect.Sets;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class IsolineBuilder {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DtfeTriangulationMap<? extends DensityModel> dtfe;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ScaleType scaleType = ScaleType.LOG;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public IsolineBuilder(DtfeTriangulationMap<? extends DensityModel> dtfe) {
        this.dtfe = dtfe;
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull IsolineBuilder setScaleType(ScaleType scaleType) {
        this.scaleType = scaleType;
        return this;
    }

    /**
     * Returns a list of list of vectors. Each list of vectors is a continuous
     * isoline at the specified value.
     */
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<List<Vector>> getIsoLines(double value) {
        Set<Segment> segments = Sets.newLinkedHashSet();
        Multimap<Edge, Segment> segmentsMap = ArrayListMultimap.create();
        // Compute segments from triangles that pass through value
        for (Triangle tri : dtfe.getTriangulation().getTriangles()) {
            // Compare vertex density with iso value
            List<Vertex> above = Lists.newArrayList();
            List<Vertex> below = Lists.newArrayList();
            for (Vertex v : tri.getVertices()) {
                if (dtfe.getRelativeDensity(dtfe.getDensity(v), scaleType) > value) {
                    above.add(v);
                } else {
                    below.add(v);
                }
            }
            // All vertices above or below value
            if (above.size() == 3 || below.size() == 3 || above.size() + below.size() != 3) {
                continue;
            } else // One vertex above value (2 below)
            if (above.size() == 1) {
                Segment segment = new Segment(Iterables.getOnlyElement(above), below.get(0), below.get(1), value);
                segmentsMap.put(segment.e0, segment);
                segmentsMap.put(segment.e1, segment);
                segments.add(segment);
            } else // One vertex below value (2 above)
            if (below.size() == 1) {
                Segment segment = new Segment(Iterables.getOnlyElement(below), above.get(0), above.get(1), value);
                segmentsMap.put(segment.e0, segment);
                segmentsMap.put(segment.e1, segment);
                segments.add(segment);
            }
        }
        // Connect line segments into lists of vectors
        List<List<Vector>> paths = Lists.newArrayList();
        while (!segments.isEmpty()) {
            // Poll any segment
            Segment segment = Iterables.getFirst(segments, null);
            segments.remove(segment);
            Edge startEdge = segment.e0;
            Edge headEdge = segment.e1;
            List<Vector> vectors = Lists.newArrayList(segment.v0, segment.v1);
            while (segment != null) {
                // Find other segment that touches the same edge
                Collection<Segment> segs = segmentsMap.get(headEdge);
                segs.remove(segment);
                Segment nextSegment = Iterables.getFirst(segs, null);
                if (nextSegment == null) {
                    // TODO log error
                    break;
                }
                segments.remove(nextSegment);
                // Connect the segment (switch direction of segment if necessary)
                if (headEdge.equals(nextSegment.e0)) {
                    vectors.add(nextSegment.v1);
                    headEdge = nextSegment.e1;
                } else {
                    vectors.add(nextSegment.v0);
                    headEdge = nextSegment.e0;
                }
                segment = nextSegment;
                // If we reach the beginning, this path is complete
                if (headEdge.equals(startEdge)) {
                    paths.add(vectors);
                    break;
                }
            }
        }
        return paths;
    }

    private class Segment {

        final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector v0;

        final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Edge e0;

        final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vector v1;

        final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Edge e1;

        @org.checkerframework.dataflow.qual.Impure
        private Segment(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex vCommon, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex v0, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex v1,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double value) {
            // Compute the location of the segment endpoints based on the
            // density of the vertices and the iso value
            double dCommon = dtfe.getRelativeDensity(dtfe.getDensity(vCommon), scaleType);
            double d0 = dtfe.getRelativeDensity(dtfe.getDensity(v0), scaleType);
            double d1 = dtfe.getRelativeDensity(dtfe.getDensity(v1), scaleType);
            double t0 = (value - dCommon) / (d0 - dCommon);
            double t1 = (value - dCommon) / (d1 - dCommon);
            this.e0 = new Edge(vCommon, v0);
            this.v0 = v0.subtract(vCommon).multiply(t0).add(vCommon);
            this.e1 = new Edge(vCommon, v1);
            this.v1 = v1.subtract(vCommon).multiply(t1).add(vCommon);
        }
    }
}
