import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class Indexer {

    private  Map<String, SearchResponse> storage;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public Indexer() {
        //single word, many urls
        storage = new HashMap<String, SearchResponse>();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void index( Indexer this,  SearchResponse index) {
        String searchWord = index.word;
        if (storage.containsKey(searchWord)) {
            //for each url in the index
            for (Url url : index.urls) {
                ArrayList<Url> storedIndex = storage.get(searchWord).urls;
                int pos = storedIndex.indexOf(url);
                if (pos >= 0) {
                    Url updated = storedIndex.get(pos);
                    updated.rank += url.rank;
                    storedIndex.set(pos, updated);
                } else {
                    storedIndex.add(url);
                }
            }
        } else {
            storage.put(index.word, index);
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  SearchResponse getSearchResponse( Indexer this,  String string) {
        return storage.get(string);
    }
}
