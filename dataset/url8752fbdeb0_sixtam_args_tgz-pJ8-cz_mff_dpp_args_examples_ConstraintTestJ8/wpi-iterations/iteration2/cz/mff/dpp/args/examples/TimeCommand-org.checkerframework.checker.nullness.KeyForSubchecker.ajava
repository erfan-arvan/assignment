package cz.mff.dpp.args.examples;

import java.util.Arrays;
import cz.mff.dpp.args.*;

/**
 * Time command demo ... not to forget to use "--".
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class TimeCommand {

    private static final class TimeOptions {

        private static final  String FORMAT_DESC = "Specify output format, possibly overriding the format specified in the environment variable TIME.";

        private static final  String PORT_DESC = "Use the portable output format.";

        private static final  String OUT_DESC = "Do not send the results to stderr, but overwrite the specified file.";

        private static final  String APPEND_DESC = "(Used together with -o.) Do not overwrite but append.";

        private static final  String VERBOSE_DESC = "Give very verbose output about all the program knows about.";

        private static final  String HELP_DESC = "Print a usage message on standard output and exit successfully.";

        private static final  String VERSION_DESC = " Print version information on standard output, then exit successfully.";

        // Options
        public boolean printVersion;

        public boolean printUsage;

        @org.checkerframework.dataflow.qual.Impure
        void setVerbose() {
            verbose = true;
        }

        public   boolean verbose;

        public boolean append;

        public boolean portability;

        public String format;

        @org.checkerframework.dataflow.qual.Impure
        private void setOutputFile(Integer[] outputFile) {
            // could do more work here ...
            System.out.println(Arrays.toString(outputFile));
            //this.outputFile = outputFile[0];
        }

        public String outputFile;

        String command;

        public String[] arguments;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        TimeOptions timeOptions = new TimeOptions();
        Parser parser = new Parser(timeOptions);
        try {
            parser.parse(args);
        } catch (ParseException e) {
            System.out.println(e.getMessage());
            parser.usage();
        }
        // program logic
    }
}
