import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.io.IOException;
import java.io.StringWriter;
import java.net.DatagramPacket;
import java.net.InetSocketAddress;
import java.net.SocketException;
import java.util.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentHashMap;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public final class Controller implements Runnable {

    private   int nodeID;

    // queues allow for complete decoupling of receiver<->controller<->sender
    private  BlockingQueue receiveQueue;

    private  BlockingQueue sendQueue;

    private  InetSocketAddress bootstrapNode;

    private  Map<Integer, Contact> routingTable;

    private Indexer indexer;

    //timers---
    private  Timer rTableTimer;

    private  Waiter searchResponseWaiter;

    private  Map<Integer, Timer> pingTimers;

    private  Map<String, Timer> indexTimers;

    //----
    //for each search invocation by the user the search responses are buffered before sent back
    private  Vector<SearchResponse> resultResponses;

    @org.checkerframework.dataflow.qual.Impure
    public Controller( BlockingQueue rQueue,  BlockingQueue sQueue) {
        receiveQueue = rQueue;
        sendQueue = sQueue;
        rTableTimer = new Timer();
        //start the routing table cleanup procedure after refreshTime on every refreshTime interval to weed out stale contacts
        rTableTimer.scheduleAtFixedRate(new RefreshRoutingTable(), NetworkProperties.refreshTime * 1000, NetworkProperties.refreshTime * 1000);
        //access from multiple threads
        routingTable = new ConcurrentHashMap<Integer, Contact>();
        pingTimers = new ConcurrentHashMap<Integer, Timer>();
        indexTimers = new ConcurrentHashMap<String, Timer>();
    }

    @org.checkerframework.dataflow.qual.Impure
    public void run( Controller this) {
        while (true) {
            try {
                DatagramPacket receivedPacket = (DatagramPacket) receiveQueue.take();
                //the queue blocks if empty
                handleReceivedPacket(receivedPacket);
            } catch (InterruptedException e) {
                System.err.println("Could not take from receive queue in Controller");
                e.printStackTrace();
            }
        }
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    private static   int getAsInteger( JSONObject jsonObj,  String fieldName) {
        int result = 0;
        if (jsonObj.containsKey(fieldName)) {
            try {
                //there are some wierd conversion going on when constructing the json
                result = Integer.parseInt((String) jsonObj.get(fieldName));
            } catch (NumberFormatException nfe) {
            }
        }
        return result;
    }

    @org.checkerframework.dataflow.qual.Impure
    private void handleReceivedPacket( Controller this,  DatagramPacket packet) {
        JSONObject jsonObj = datagramToJson(packet);
        MessageType messageType;
        //well, either further scope the case statements or just expose the variables to the whole switch statement
        int sender_id = 0, target_id = 0, node_id = 0, gateway_id = 0;
        String word = null, ip_address = null;
        //deserialize the whole message. Always put the value as a String and not an Integer even when it is an Integer
        messageType = MessageType.valueOf((String) jsonObj.get("type"));
        sender_id = getAsInteger(jsonObj, "sender_id");
        target_id = getAsInteger(jsonObj, "target_id");
        node_id = getAsInteger(jsonObj, "node_id");
        gateway_id = getAsInteger(jsonObj, "gateway_id");
        if (jsonObj.containsKey("word"))
            word = (String) jsonObj.get("word");
        if (jsonObj.containsKey("ip_address"))
            ip_address = (String) jsonObj.get("ip_address");
        Contact closestNode;
        JSONObject message;
        InetSocketAddress address;
        try {
            switch(messageType) {
                case JOINING_NETWORK_SIMPLIFIED:
                    //update routing table with single contact
                    singleUpdateRouteTable(node_id, packet.getAddress().getHostAddress());
                    if (nodeID == target_id) {
                        message = getRoutingInfoJson(jsonObj, nodeID);
                        address = new InetSocketAddress(packet.getAddress(), NetworkProperties.nPort);
                        sendQueue.put(jsonToDatagram(message, address));
                    } else {
                        closestNode = getClosestNode(target_id);
                        if (closestNode != null) {
                            // maybe I am closest but still route message to at least one other node
                            message = new JSONObject();
                            message.put("type", "JOINING_NETWORK_RELAY_SIMPLIFIED");
                            message.put("node_id", String.valueOf(node_id));
                            message.put("target_id", String.valueOf(closestNode));
                            message.put("gateway_id", String.valueOf(nodeID));
                            address = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                            sendQueue.put(jsonToDatagram(message, address));
                        } else {
                            // not target and does not have anything in the routing table
                        }
                    }
                    break;
                case JOINING_NETWORK_RELAY_SIMPLIFIED:
                    // I assume the gateway is sending this message even if it actually relayed(for now)
                    singleUpdateRouteTable(node_id, packet.getAddress().getHostAddress());
                    if (target_id == nodeID) {
                        closestNode = getClosestNode(node_id);
                        //if there is nothing in the routing table
                        if (closestNode == null) {
                            message = getRoutingInfoJson(jsonObj, target_id);
                            //this wouldn't have effect in simulation
                            address = new InetSocketAddress(packet.getAddress(), packet.getPort());
                        } else {
                            //else forward message. No need to reconstruct the whole message
                            message = jsonObj;
                            message.put("target_id", String.valueOf(closestNode.getId()));
                            address = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                        }
                        sendQueue.put(jsonToDatagram(message, address));
                    }
                    break;
                case ROUTING_INFO:
                    singleUpdateRouteTable(sender_id, ip_address);
                    //dump the all routing_info messages in the routing table
                    updateRouteTable((JSONArray) jsonObj.get("route_table"));
                    message = jsonObj;
                    if (gateway_id == nodeID) {
                        // if current is gateway
                        //TODO remember to disable assertions for non-testing environment
                        assert routingTable.get(node_id).getIp() == "127.0.0.1" : "ip address of node in routing info is wrong";
                        //again ip does not have effect in simulation
                        address = new InetSocketAddress(routingTable.get(node_id).getIp(), NetworkProperties.nPort);
                        sendQueue.put(jsonToDatagram(message, address));
                    } else {
                        // pass on to gateway(cuts corners) or TODO implement stateful routing so messsage can go back from hop-to-hop
                        if (routingTable.containsKey(gateway_id)) {
                            assert routingTable.get(node_id).getIp() == "127.0.0.1" : "ip address of node in routing info is wrong";
                            address = new InetSocketAddress(routingTable.get(node_id).getIp(), NetworkProperties.nPort);
                            sendQueue.put(jsonToDatagram(message, address));
                        }
                    }
                    break;
                case INDEX:
                    // I  assume the sender is sending this message even if it actually relayed
                    singleUpdateRouteTable(sender_id, packet.getAddress().getHostAddress());
                    word = (String) jsonObj.get("keyword");
                    //if current is the target id then index
                    if (target_id == nodeID) {
                        SearchResponse index = SearchResponse.fromIndexJson(jsonObj);
                        // english language at its best
                        indexer.index(index);
                        message = new JSONObject();
                        message.put("type", "ACK_INDEX");
                        message.put("node_id", String.valueOf(nodeID));
                        message.put("keyword", jsonObj.get("keyword"));
                        address = new InetSocketAddress(packet.getAddress(), NetworkProperties.nPort);
                    } else {
                        // else forward to closest in routing table
                        int wordHash = NetworkProperties.hashCode(word);
                        closestNode = getClosestNode(wordHash);
                        message = jsonObj;
                        message.put("target_id", String.valueOf(closestNode.getId()));
                        address = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                    }
                    sendQueue.put(jsonToDatagram(message, address));
                    break;
                case SEARCH:
                    singleUpdateRouteTable(sender_id, packet.getAddress().getHostAddress());
                    if (node_id == nodeID) {
                        //also the hash of the word
                        SearchResponse response = indexer.getSearchResponse((String) jsonObj.get("word"));
                        if (response != null)
                            //does not put sender_id and node_id
                            message = response.toJson();
                        else
                            message = null;
                        //I am the sender of the SEARCH_RESPONSE
                        message.put("sender_id", String.valueOf(nodeID));
                        message.put("node_id", String.valueOf((sender_id)));
                        address = new InetSocketAddress(packet.getAddress(), NetworkProperties.nPort);
                        sendQueue.put(jsonToDatagram(message, address));
                    } else {
                        // else move the packet along
                        closestNode = getClosestNode(node_id);
                        if (closestNode != null) {
                            message = jsonObj;
                            message.put("node_id", String.valueOf(closestNode.getId()));
                            address = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                            sendQueue.put(jsonToDatagram(message, address));
                        }
                    }
                    break;
                case SEARCH_RESPONSE:
                    if (node_id == nodeID) {
                        // then I am the recipient
                        //will have implications in the getSearchResponse method
                        searchResponseWaiter.stopWait(word);
                        SearchResponse result = SearchResponse.fromResponseJson(jsonObj);
                        resultResponses.add(result);
                    } else {
                        if (routingTable.containsKey(node_id)) {
                            message = jsonObj;
                            address = new InetSocketAddress(routingTable.get(node_id).getIp(), NetworkProperties.nPort);
                            sendQueue.put(jsonToDatagram(message, address));
                        } else {
                            //again implement stateful routing on the backwards path. Something like NAT. Otherwise hop-to-hop is not really done right
                        }
                    }
                    break;
                case LEAVING_NETWORK:
                    routingTable.remove(jsonObj.get("node_id"));
                    break;
                case ACK:
                    //the PING ACK will not be functioning as intended on a simulation with a single machine because the ACK is only routed based on the ip of the receipient.
                    // and all nodes have ip of 127.0.0.1 on a single machine
                    if (ip_address.equals(NetworkProperties.nAddress)) {
                        if (pingTimers.containsKey(node_id)) {
                            singleUpdateRouteTable(node_id);
                            pingTimers.get(node_id).cancel();
                            pingTimers.remove(node_id);
                        }
                    }
                    break;
                case ACK_INDEX:
                    // the ack_index is different from the ack in that the destination node is not identified by ip but with id.
                    word = (String) jsonObj.get("keyword");
                    if (indexTimers.containsKey(word)) {
                        indexTimers.get(word).cancel();
                        indexTimers.remove(word);
                    }
                    break;
                case PING:
                    routingTable.put(sender_id, new Contact(sender_id, ip_address));
                    singleUpdateRouteTable(sender_id, ip_address);
                    if (target_id == nodeID) {
                        // if current is the suspected dead
                        message = new JSONObject();
                        message.put("type", "ACK");
                        message.put("node_id", String.valueOf(nodeID));
                        message.put("ip_address", NetworkProperties.nAddress);
                        address = new InetSocketAddress(packet.getAddress(), packet.getPort());
                        sendQueue.put(jsonToDatagram(message, address));
                    } else {
                        // else forward
                        message = jsonObj;
                        //current's address changes each hop
                        message.put("ip_address", NetworkProperties.nAddress);
                        if (routingTable.containsKey(target_id)) {
                            address = new InetSocketAddress(routingTable.get(target_id).getIp(), NetworkProperties.nPort);
                            sendQueue.put(jsonToDatagram(message, address));
                        } else {
                        }
                    }
                    break;
                //internal housekeeping. send out pings to stale contacts
                case REFRESH_ROUTING_TABLE:
                    //System.out.println("will handle update routing table message");
                    for (Map.Entry<Integer, Contact> entry : routingTable.entrySet()) {
                        final Contact contact = entry.getValue();
                        long currTime = System.currentTimeMillis();
                        if (currTime - contact.getTimestamp() > NetworkProperties.staleTime * 1000) {
                            message = getPingJson(contact);
                            address = new InetSocketAddress(contact.getIp(), NetworkProperties.nPort);
                            sendQueue.put(jsonToDatagram(message, address));
                            Timer pingTimer = new Timer();
                            pingTimer.schedule(new TimerTask() {

                                //if timer not cancelled before time expires then contact removed
                                @org.checkerframework.dataflow.qual.Impure
                                public void run() {
                                    routingTable.remove(contact.getId());
                                }
                            }, NetworkProperties.pingWait * 1000);
                            pingTimers.put(contact.getId(), pingTimer);
                        }
                    }
                    break;
            }
        } catch (InterruptedException e) {
            System.err.println("Java!! You ain't serious, are you? Anyway, couldn't put message on sendQ in Controller");
            e.printStackTrace();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void sendJoin( Controller this,  InetSocketAddress bootstrap_node,   int nodeHash,   int bootHash) {
        nodeID = nodeHash;
        bootstrapNode = bootstrap_node;
        if (nodeHash == bootHash)
            return;
        JSONObject sendJSON = new JSONObject();
        sendJSON.put("type", MessageType.JOINING_NETWORK_SIMPLIFIED.name());
        sendJSON.put("node_id", Integer.toString(nodeHash));
        sendJSON.put("target_id", Integer.toString(bootHash));
        sendJSON.put("ip_address", NetworkProperties.nAddress.toString());
        try {
            sendQueue.put(jsonToDatagram(sendJSON, bootstrap_node));
        } catch (InterruptedException e) {
            System.err.println("Could not put Datagram on sendQueue in Controller");
            e.printStackTrace();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void leaveNetwork( Controller this,   long network_id) {
        //tell of me contact I am leaving
        for (Map.Entry<Integer, Contact> entry : routingTable.entrySet()) {
            JSONObject message = new JSONObject();
            message.put("type", "LEAVE_NETWORK");
            message.put("node_id", String.valueOf(nodeID));
            InetSocketAddress address = new InetSocketAddress(entry.getValue().getIp(), NetworkProperties.nPort);
            try {
                sendQueue.put(jsonToDatagram(message, address));
            } catch (InterruptedException e) {
                System.err.println("Could not put Datagram on sendQueue in Controller");
                e.printStackTrace();
            }
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void sendIndex( Controller this,  String url,  String  [] unique_words) {
        // this url has these words. send an index message for each word
        JSONObject template = new JSONObject();
        template.put("type", "INDEX");
        for (String word : unique_words) {
            JSONObject message = (JSONObject) template.clone();
            int wordHash = NetworkProperties.hashCode(url);
            if (wordHash == nodeID) {
                //if word hash matches my id then I should index
                SearchResponse index = new SearchResponse();
                index.word = word;
                index.urls.add(new Url(url, 1));
                indexer.index(index);
            } else {
                // else send to closest node. Might even match exactly
                Contact closestNode = getClosestNode(wordHash);
                if (closestNode != null) {
                    JSONArray links = new JSONArray();
                    links.add(word);
                    message.put("keyword", word);
                    message.put("link", links);
                    message.put("sender_id", String.valueOf(nodeID));
                    message.put("target_id", String.valueOf(wordHash));
                    InetSocketAddress address = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                    try {
                        sendQueue.put(jsonToDatagram(message, address));
                    } catch (InterruptedException e) {
                        System.err.println("Could not put Datagram on sendQueue in Controller");
                        e.printStackTrace();
                    }
                }
            }
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public  Vector<SearchResponse> sendSearch( Controller this, final  String  [] words) {
        //we don't know how many results to expect so make a list of them
        resultResponses = new Vector<SearchResponse>();
        //spawns a new timer in a map<word,timer> for each search request and when
        searchResponseWaiter = new Waiter();
        // the map is emptied(i.e all searches responded or all pings have been resolved) the thread finishes
        (new // spin a new thread at the end of which the complete set of results is send back to the user
        Thread() {

            @org.checkerframework.dataflow.qual.Impure
            public void run() {
                for (String word : words) {
                    //if my id matches that of the word hash then take straight from my indexer
                    int targetHash = NetworkProperties.hashCode(word);
                    if (targetHash == nodeID) {
                        resultResponses.add(indexer.getSearchResponse(word));
                    } else {
                        //else fire off search queries to appropriate nodes. Assume a node will exist for a keyword
                        //getting the closest node will have the dual effect of checking if we have direct access to target
                        // or else giving us the closest node's ip.
                        Contact closestNode = getClosestNode(targetHash);
                        if (closestNode != null) {
                            JSONObject sendJSON = new JSONObject();
                            sendJSON.put("type", "SEARCH");
                            sendJSON.put("node_id", Integer.toString(targetHash));
                            sendJSON.put("word", word);
                            sendJSON.put("sender_id", Integer.toString(nodeID));
                            InetSocketAddress sendAddress = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                            try {
                                sendQueue.put(jsonToDatagram(sendJSON, sendAddress));
                            } catch (InterruptedException e) {
                                System.err.println("Could not put Datagram on sendQueue in Controller");
                                e.printStackTrace();
                            }
                            //the waiter will handle the waiting for the search response and if necessary send out a ping
                            //strictly speaking, we should start the timer only after the message has left the socket but we simplify a bit
                            // and do it now
                            searchResponseWaiter.startWait(word, targetHash);
                        }
                    }
                }
                while (!searchResponseWaiter.transactionFinalized()) //poll every second
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).// in a sense we are waiting until everything about a search is resolved except possible ping requests
        start();
        return resultResponses;
    }

    @org.checkerframework.dataflow.qual.Impure
    private  DatagramPacket jsonToDatagram( Controller this,  JSONObject json,  InetSocketAddress sendAddress) {
        StringWriter out = new StringWriter();
        // blahh,
        DatagramPacket sendPacket = null;
        try {
            // non-business logic
            // who cares? :)
            byte[] sendBuffer;
            if (json == null) {
                sendBuffer = new byte[1];
            } else {
                json.writeJSONString(out);
                sendBuffer = out.toString().getBytes();
            }
            sendPacket = new DatagramPacket(sendBuffer, sendBuffer.length, sendAddress);
        } catch (SocketException e) {
            System.err.println("Could put address on packet in Controller");
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("Could not convert JSON to String in Controller");
            e.printStackTrace();
        }
        return sendPacket;
    }

    @org.checkerframework.dataflow.qual.Impure
    private  JSONObject datagramToJson( Controller this,  DatagramPacket packet) {
        Object jsonObj = null;
        try {
            String receivedData = new String(packet.getData());
            //the json does not include the length so we have get it manually
            int i = 0;
            while (i < receivedData.length() && isValidChar(receivedData.charAt(i))) i++;
            receivedData = receivedData.substring(0, i);
            //            System.out.println("received: "+receivedData.toString());
            JSONParser parser = new JSONParser();
            jsonObj = parser.parse(receivedData);
        } catch (ParseException e) {
            System.err.println("Could not parse incoming message in Controller");
            e.printStackTrace();
        }
        return (JSONObject) jsonObj;
    }

    @org.checkerframework.dataflow.qual.Pure
    private   boolean isValidChar( Controller this,   char c) {
        return ((int) c >= 32 && (int) c <= 126);
    }

    @org.checkerframework.dataflow.qual.Impure
    private  JSONObject getRoutingInfoJson( Controller this,  JSONObject jsonObj,   int gateway_id) {
        JSONObject backJson = new JSONObject();
        backJson.put("type", "ROUTING_INFO");
        //different gateway id depending on the received message-> JOIN OR JOIN_RELAY
        backJson.put("gateway_id", String.valueOf(gateway_id));
        // send back to requesting node
        backJson.put("node_id", (String) jsonObj.get("node_id"));
        // current's  address
        backJson.put("ip_address", NetworkProperties.nAddress);
        JSONArray table = new JSONArray();
        for (Map.Entry<Integer, Contact> entry : routingTable.entrySet()) {
            JSONObject jsonContact = new JSONObject();
            jsonContact.put("node_id", String.valueOf(entry.getKey()));
            jsonContact.put("ip_address", entry.getValue().getIp());
            table.add(jsonContact);
        }
        backJson.put("route_table", table);
        return backJson;
    }

    @org.checkerframework.dataflow.qual.Impure
    private  JSONObject getPingJson( Controller this,  Contact target) {
        JSONObject message = new JSONObject();
        message.put("type", "PING");
        message.put("sender_id", String.valueOf(nodeID));
        message.put("target_id", String.valueOf(target.getId()));
        return message;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  Contact getClosestNode( Controller this,   int id) {
        // that is not current
        Contact closest = null;
        int smallest_diff = Integer.MAX_VALUE;
        for (Map.Entry<Integer, Contact> entry : routingTable.entrySet()) {
            /**/
            int curr_diff = Math.abs(entry.getKey() - id);
            if (curr_diff < smallest_diff) {
                smallest_diff = curr_diff;
                closest = entry.getValue();
            }
        }
        return closest;
    }

    @org.checkerframework.dataflow.qual.Impure
    private void singleUpdateRouteTable( Controller this,   int sender_id,  String hostAddress) {
        // current should not be in the table
        if (sender_id == nodeID)
            return;
        long currTime = System.currentTimeMillis();
        if (routingTable.containsKey(sender_id)) {
            routingTable.get(sender_id).setTimestamp(currTime);
            routingTable.get(sender_id).setIp(hostAddress);
        } else {
            routingTable.put(sender_id, new Contact(sender_id, hostAddress));
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void singleUpdateRouteTable( Controller this,   int sender_id) {
        if (sender_id == nodeID)
            return;
        long currTime = System.currentTimeMillis();
        if (routingTable.containsKey(sender_id)) {
            routingTable.get(sender_id).setTimestamp(currTime);
        } else {
            routingTable.put(sender_id, new Contact(sender_id, "127.0.0.1"));
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    private void updateRouteTable( Controller this,  JSONArray table) {
        for (Object row : table) {
            JSONObject tableNode = (JSONObject) row;
            int nodeID = Integer.valueOf((String) tableNode.get("node_id"));
            Contact tableContact = new Contact(nodeID, (String) tableNode.get("ip_addresss"));
            tableContact.setTimestamp(System.currentTimeMillis());
            routingTable.put(nodeID, tableContact);
        }
    }

    /*
    * Put an internal periodic update routing table message for the controller to handle.
    * Delegated to the Controller rather than here in the run method to prevent mutual exclusion
    * problems on the routing table.Otherwise the table has to be locked if there is more than
    * one point of entry to it.
    * UPDATE: the rule no longer applies as the routingTable was changed 
    * to ConcurrentHashMap so different threads do not have to worry about the table consistency.
    * */
    private class RefreshRoutingTable extends TimerTask {

        @org.checkerframework.dataflow.qual.Impure
        public void run( RefreshRoutingTable this) {
            try {
                JSONObject message = new JSONObject();
                message.put("type", "REFRESH_ROUTING_TABLE");
                receiveQueue.put(jsonToDatagram(message, new InetSocketAddress("", 0)));
            } catch (InterruptedException e) {
                System.err.println("Could not put internal refresh table message in Controller");
                e.printStackTrace();
            }
        }
    }

    private class Waiter {

        // <word, timer for word>
         Map<String, Timer> wordTimers;

        @org.checkerframework.dataflow.qual.Pure
        public   boolean transactionFinalized( Waiter this) {
            return wordTimers.isEmpty();
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public Waiter() {
            wordTimers = new HashMap<String, Timer>();
        }

        @org.checkerframework.dataflow.qual.Impure
        public void stopWait( Waiter this,  String word) {
            wordTimers.get(word).cancel();
            wordTimers.remove(word);
        }

        // the wait for a particular word will be cancelled with the stopWait method
        @org.checkerframework.dataflow.qual.Impure
        public void startWait( Waiter this,  String word, final   int targetHash) {
            Timer responseTimer = new Timer();
            responseTimer.schedule(new TimerTask() {

                @org.checkerframework.dataflow.qual.Impure
                public void run() {
                    //the run method will be run only after the scheduled time has expired
                    //send a ping to target through the closest node.Might even be the actual node
                    Contact closestNode = getClosestNode(targetHash);
                    if (closestNode != null) {
                        JSONObject message = getPingJson(closestNode);
                        InetSocketAddress address = new InetSocketAddress(closestNode.getIp(), NetworkProperties.nPort);
                        try {
                            sendQueue.put(jsonToDatagram(message, address));
                        } catch (InterruptedException e) {
                            System.err.println("Could not put Ping Datagram on sendQueue in Wait Timer");
                            e.printStackTrace();
                        }
                    } else {
                        //There should not be an else.
                    }
                    //start the ping timer for the above message
                    Timer pingTimer = new Timer();
                    pingTimer.schedule(new TimerTask() {

                        @org.checkerframework.dataflow.qual.Impure
                        public void run() {
                            //if the ping does not respond then remove from table
                            routingTable.remove(targetHash);
                        }
                    }, NetworkProperties.pingWait * 1000);
                    //pingTimers is a member field of the parent class Controller. the current
                    pingTimers.put(targetHash, pingTimer);
                    //ping timer is handled there because that is where the ACK message will be handled. A bit convoluted but that's the nature
                    //of async. It is very possible that PING request from the periodic refreshTable task which spawns a timer will be replaced
                    // if the its id(corresponding to a node) matches that of the one just created here.
                }
            }, NetworkProperties.responseWait * 1000);
            wordTimers.put(word, responseTimer);
        }
    }
}
