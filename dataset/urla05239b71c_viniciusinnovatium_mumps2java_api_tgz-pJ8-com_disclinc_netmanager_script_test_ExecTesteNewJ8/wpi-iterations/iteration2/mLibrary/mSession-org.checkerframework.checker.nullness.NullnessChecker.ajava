package mLibrary;

import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.UUID;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class mSession {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull String sessionId;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull mData mDataSession = new mData();

    @org.checkerframework.dataflow.qual.Impure
    public mSession(Map<String, String[]> map) {
        populateParameter(map);
        setSessionId(UUID.randomUUID().toString());
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Object getSessionId() {
        return sessionId;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.sessionId" })
    @org.checkerframework.dataflow.qual.Impure
    public void setSessionId(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String sessionId) {
        setData("sessionId", 1, sessionId);
        this.sessionId = sessionId;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void populateParameter(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<String, String[]> map) {
        Set<Entry<String, String[]>> results = map.entrySet();
        for (Entry<String, String[]> result : results) {
            for (int i = 0; i < result.getValue().length; i++) {
                mDataSession.subs(result.getKey(), i + 1).set(result.getValue()[i]);
            }
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull mVar getData(Object... args) {
        return new mVar(args, mDataSession);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public void setData(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object subs, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object idx, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
        mDataSession.subs(subs, idx).set(value);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object getLogin(Object object, Object object2, int i) {
        // TODO Auto-generated method stub
        return 1;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.sessionId" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object getAppTimeout() {
        //TODO REVISAR TIMEOUT PROVISÃ“RIO;
        return 1;
    }
}
