package org.delaunay.model;

import java.util.List;
import java.util.Map;
import org.delaunay.algorithm.Triangulation;
import org.delaunay.algorithm.Triangulation.InvalidVertexException;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TriangulationMultimap<T> {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayListMultimap<Vertex, T> map = ArrayListMultimap.create();

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Map<Vertex, Vertex> canonicalKeys = Maps.newHashMap();

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Triangulation triangulation = new Triangulation();

    @org.checkerframework.dataflow.qual.Impure
    public TriangulationMultimap() {
        triangulation.setKeepSuperTriangle(true);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void clear() {
        map.clear();
        triangulation.clear();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Triangulation getTriangulation() {
        return triangulation;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean contains(double x, double y) {
        return map.containsKey(new Vertex(x, y));
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex put(double x, double y, T value) {
        return put(new Vertex(x, y), value);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex put(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Vertex vert, T value) {
        if (canonicalKeys.containsKey(vert)) {
            vert = canonicalKeys.get(vert);
        } else {
            triangulation.addVertex(vert);
            canonicalKeys.put(vert, vert);
        }
        map.put(vert, value);
        return vert;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Vertex getKey(double x, double y) {
        return canonicalKeys.get(new Vertex(x, y));
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<T> get(Vertex key) {
        return map.get(key);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void triangulate() throws InvalidVertexException {
        triangulation.triangulate();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<T> locate(double x, double y) {
        Vertex vert = triangulation.locateNearestVertex(new Vector(x, y));
        if (vert == null) {
            return Lists.newArrayList();
        }
        return map.get(vert);
    }
}
