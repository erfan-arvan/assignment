/*     */
package org.ands.rifcs.base;

/*     */
/*     */
import java.text.SimpleDateFormat;
/*     */
import java.util.ArrayList;
/*     */
import java.util.Calendar;
/*     */
import java.util.Date;
/*     */
import java.util.List;
/*     */
import java.util.TimeZone;
/*     */
import org.w3c.dom.Document;
/*     */
import org.w3c.dom.Element;
/*     */
import org.w3c.dom.Node;
/*     */
import org.w3c.dom.NodeList;

/*     */
/*     */
/*     */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class RIFCSElement {

    /*     */
    /*  40 */
    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.MonotonicNonNull Element e = null;

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.dataflow.qual.SideEffectFree
    protected RIFCSElement(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Node n, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) throws /*     */
    RIFCSException /*     */
    {
        /*  56 */
        if (n == null) /*     */
        {
            /*  58 */
            throw new RIFCSException("Null Node passed to constructor");
            /*     */
        }
        /*     */
        /*  61 */
        if ((n instanceof Element)) /*     */
        {
            /*  63 */
            if (!n.getNodeName().endsWith(name)) /*     */
            {
                /*  65 */
                throw new RIFCSException("Mismatch tag name. Node tag is: " + n.getNodeName() + ", expected: " + name);
                /*     */
            }
            /*     */
        } else /*     */
        /*     */
        {
            /*  70 */
            throw new RIFCSException("Node of type Element required in constructor");
            /*     */
        }
        /*     */
        /*  73 */
        this.e = ((Element) n);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAttributeValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) /*     */
    {
        /*  89 */
        return this.e.getAttribute(name);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Impure
    protected void setAttributeValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String value) /*     */
    {
        /* 105 */
        this.e.setAttribute(name, value);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Impure
    protected void setAttributeValueNS(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String ns, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String value) /*     */
    {
        /* 123 */
        this.e.setAttributeNS(ns, name, value);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAttributeValueNS(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String ns, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String name) /*     */
    {
        /* 138 */
        return this.e.getAttributeNS(ns, name);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getAttributeValue(String ns, String localName) /*     */
    {
        /* 158 */
        return this.e.getAttributeNS(ns, localName);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String getTextContent() /*     */
    {
        /* 170 */
        return this.e.getTextContent();
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Impure
    protected void setTextContent(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String value) /*     */
    {
        /* 182 */
        this.e.setTextContent(value);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "#1" })
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull NodeList getElements(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable String localName) /*     */
    {
        /* 197 */
        return this.e.getElementsByTagNameNS("http://ands.org.au/standards/rif-cs/registryObjects", localName);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Node> getChildElements(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String localName) /*     */
    {
        /* 213 */
        NodeList nl = this.e.getChildNodes();
        /* 214 */
        List l = new ArrayList();
        /* 215 */
        for (int i = 0; i < nl.getLength(); i++) /*     */
        {
            /* 217 */
            if ((nl.item(i).getNodeType() == 1) && /* 218 */
            (nl.item(i).getLocalName().equals(localName))) /*     */
            {
                /* 220 */
                l.add(nl.item(i));
                /*     */
            }
            /*     */
        }
        /*     */
        /* 224 */
        return l;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.e" })
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Node> getChildElements() /*     */
    {
        /* 236 */
        NodeList nl = this.e.getChildNodes();
        /* 237 */
        List l = new ArrayList();
        /* 238 */
        for (int i = 0; i < nl.getLength(); i++) /*     */
        {
            /* 240 */
            if (nl.item(i).getNodeType() == 1) /*     */
            {
                /* 242 */
                l.add(nl.item(i));
                /*     */
            }
            /*     */
        }
        /*     */
        /* 246 */
        return l;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.e" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.e" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Element getElement() /*     */
    {
        /* 258 */
        return this.e;
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.e" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Element newElement(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String elementName) /*     */
    {
        /* 271 */
        return getElement().getOwnerDocument().createElementNS("http://ands.org.au/standards/rif-cs/registryObjects", elementName);
        /*     */
    }

    /*     */
    /*     */
    @org.checkerframework.dataflow.qual.Impure
    protected static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String formatDate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Date date) /*     */
    {
        /* 283 */
        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        /* 284 */
        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        /* 285 */
        cal.setTime(date);
        /* 286 */
        df.setCalendar(cal);
        /* 287 */
        return df.format(cal.getTime());
        /*     */
    }
}
/* Location:           /Users/przemyslaw/Downloads/rifcs-api-1.3.0.jar
 * Qualified Name:     org.ands.rifcs.base.RIFCSElement
 * JD-Core Version:    0.6.2
 */
