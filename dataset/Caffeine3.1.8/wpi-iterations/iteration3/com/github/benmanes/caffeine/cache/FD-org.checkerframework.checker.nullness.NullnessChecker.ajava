// Copyright 2024 Ben Manes. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.github.benmanes.caffeine.cache;

import com.github.benmanes.caffeine.cache.References.LookupKeyReference;
import com.github.benmanes.caffeine.cache.References.SoftValueReference;
import com.github.benmanes.caffeine.cache.References.WeakKeyReference;
import java.lang.invoke.MethodHandles;
import java.lang.invoke.VarHandle;
import java.lang.ref.Reference;
import java.lang.ref.ReferenceQueue;

/**
 * <em>WARNING: GENERATED CODE</em>
 *
 * <p>A cache entry that provides the following features:
 *
 * <ul>
 *   <li>WeakKeys
 *   <li>SoftValues
 * </ul>
 *
 * @author ben.manes@gmail.com (Ben Manes)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
class FD<K, V> extends Node<K, V> implements NodeFactory<K, V> {

    protected static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull VarHandle VALUE;

    static {
        MethodHandles.Lookup lookup = MethodHandles.lookup();
        try {
            VALUE = lookup.findVarHandle(FD.class, NodeFactory.VALUE, SoftValueReference.class);
        } catch (ReflectiveOperationException e) {
            throw new ExceptionInInitializerError(e);
        }
    }

    volatile @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull SoftValueReference<V> value;

    @org.checkerframework.dataflow.qual.Impure
    FD() {
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    FD(K key, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<K> keyReferenceQueue, V value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<V> valueReferenceQueue,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int weight,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long now) {
        this(new WeakKeyReference<K>(key, keyReferenceQueue), value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    FD(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object keyReference, V value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<V> valueReferenceQueue,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int weight,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long now) {
        VALUE.set(this, new SoftValueReference<V>(keyReference, value, valueReferenceQueue));
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object getKeyReference(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        SoftValueReference<V> valueRef = (SoftValueReference<V>) VALUE.get(this);
        return valueRef.getKeyReference();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final K getKey(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        SoftValueReference<V> valueRef = (SoftValueReference<V>) VALUE.get(this);
        Reference<K> keyRef = (Reference<K>) valueRef.getKeyReference();
        return keyRef.get();
    }

    @org.checkerframework.framework.qual.RequiresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final V getValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        for (; ; ) {
            Reference<V> ref = (Reference<V>) VALUE.getOpaque(this);
            V referent = ref.get();
            if ((referent != null) || (ref == VALUE.getAcquire(this))) {
                return referent;
            }
        }
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object getValueReference(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        return VALUE.get(this);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final void setValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this, V value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable ReferenceQueue<V> referenceQueue) {
        Reference<V> ref = (Reference<V>) VALUE.get(this);
        VALUE.setRelease(this, new SoftValueReference<V>(getKeyReference(), value, referenceQueue));
        ref.clear();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean containsValue(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object value) {
        return getValue() == value;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> newNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this, K key, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<K> keyReferenceQueue, V value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<V> valueReferenceQueue,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int weight,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long now) {
        return new FD<>(key, keyReferenceQueue, value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Node<K, V> newNode(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object keyReference, V value, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<V> valueReferenceQueue,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int weight,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long now) {
        return new FD<>(keyReference, value, valueReferenceQueue, weight, now);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object newLookupKey(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object key) {
        return new LookupKeyReference<>(key);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object newReferenceKey(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this, K key, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ReferenceQueue<K> referenceQueue) {
        return new WeakKeyReference<K>(key, referenceQueue);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean softValues(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        return true;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isAlive(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        Object key = getKeyReference();
        return (key != RETIRED_WEAK_KEY) && (key != DEAD_WEAK_KEY);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isRetired(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        return (getKeyReference() == RETIRED_WEAK_KEY);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final void retire(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        SoftValueReference<V> valueRef = (SoftValueReference<V>) VALUE.get(this);
        Reference<K> keyRef = (Reference<K>) valueRef.getKeyReference();
        keyRef.clear();
        valueRef.setKeyReference(RETIRED_WEAK_KEY);
        valueRef.clear();
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isDead(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        return (getKeyReference() == DEAD_WEAK_KEY);
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.value" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public final void die(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull FD<K, V> this) {
        SoftValueReference<V> valueRef = (SoftValueReference<V>) VALUE.get(this);
        Reference<K> keyRef = (Reference<K>) valueRef.getKeyReference();
        keyRef.clear();
        valueRef.setKeyReference(DEAD_WEAK_KEY);
        valueRef.clear();
    }
}
