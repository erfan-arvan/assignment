package cz.mff.dpp.args.examples;

import cz.mff.dpp.args.Argument;
import cz.mff.dpp.args.Option;
import cz.mff.dpp.args.Parser;

/**
 * How not to define {@code @Option} setter.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SetterTest {

    public static class Options {

        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.arguments" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.bee" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
        @org.checkerframework.dataflow.qual.Impure
         @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean test() {
            System.out.println("Inside test");
            return true;
        }

        @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull String bee;

        String @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.MonotonicNonNull [] arguments;
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) throws Exception {
        System.out.println("Methods you can annotate with @Option are well defined. Here is used wrog signature ... \n\n");
        System.out.println("IllegalArgumentException expected ...\n");
        Options options = new Options();
        Parser parser = new Parser(options);
        String[] localArgs = { "-a" };
        parser.parse(localArgs);
    }
}
