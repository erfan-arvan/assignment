package event.stress;

import event.Callback;
import event.TimeoutLoop;
import java.util.Queue;
import java.util.LinkedList;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class TimeoutStressTest {

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Queue<Worker> queue = new LinkedList<Worker>();

    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop = new TimeoutLoop();

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int max;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numCreated;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numIterations;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numHit;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int numMiss;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public TimeoutStressTest( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int max,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int iterations) {
        this.max = max;
        this.numIterations = iterations;
    }

    @org.checkerframework.dataflow.qual.Impure
    void begin() {
        long start = System.nanoTime();
        this.loop.start();
        for (int stop = numIterations; stop != 0; --stop) {
            stressTest();
        }
        synchronized (this) {
            try {
                this.wait();
            } catch (Throwable t) {
                t.printStackTrace();
                System.exit(1);
            }
        }
        p("hits      " + numHit);
        p("mrs:      " + numMiss);
        p("in:(ms)   " + (System.nanoTime() - start) / 1000000);
        p("expected: " + (numHit * 5) / max);
    }

    @org.checkerframework.dataflow.qual.Impure
    void stressTest() {
        Callback.Timeout t1 = new Callback.Timeout() {

            @org.checkerframework.dataflow.qual.Impure
            public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop) {
                Worker w = getWorker();
                if (null == w) {
                    // try again
                    loop.addTimeout(workerCount % 5, this);
                    ++numMiss;
                    return;
                }
                ++numHit;
                loop.addTimeout(workerCount % 5, w);
            }
        };
        if (this.loop.isLoopThread()) {
            try {
                t1.go(this.loop);
            } catch (Throwable t) {
                t1.onError(this.loop, t);
            }
        } else {
            this.loop.addTimeout(workerCount % 5, t1);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Worker getWorker() {
        Worker w = this.queue.poll();
        if (null != w) {
            return w;
        }
        if (this.numCreated < this.max) {
            w = new Worker();
            this.numCreated++;
            return w;
        }
        return null;
    }

    @org.checkerframework.dataflow.qual.Impure
    void returnWorker(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Worker w) {
        this.queue.add(w);
    }

    static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int workerCount;

    class Worker extends Callback.Timeout {

         @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int id;

        @org.checkerframework.dataflow.qual.Impure
        Worker() {
            //super( (long)(workerCount %5) );
            super();
            this.id = workerCount++;
        }

        @org.checkerframework.dataflow.qual.Impure
        public void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Worker this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop loop) {
            returnWorker(this);
            numIterations--;
            //      if (0 == (numIterations % 100)) {
            //        dump(numIterations);
            //      }
            if (0 == numIterations) {
                synchronized (TimeoutStressTest.this) {
                    TimeoutStressTest.this.notify();
                    TimeoutStressTest.this.loop.stopLoop();
                }
            }
        }

        @org.checkerframework.dataflow.qual.Impure
        void dump(int i) {
            p(id + ":" + i);
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    static void p(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object o) {
        System.out.println(o);
    }

    @org.checkerframework.dataflow.qual.Impure
    public static void main(String[] args) {
        TimeoutStressTest test = new TimeoutStressTest(10, 10000);
        test.begin();
        test = new TimeoutStressTest(100, 10000);
        test.begin();
    }
}
