/* @copyright 2013 Computer Science Department, Recursive InterNetworking Architecture (RINA) laboratory, Boston University. 
 * All rights reserved. Permission to use, copy, modify, and distribute this software and its documentation
 * for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all 
 * copies and that both the copyright notice and this permission notice appear in supporting documentation. 
 * The RINA laboratory of the Computer Science Department at Boston University makes no 
 * representations about the suitability of this software for any purpose.
 */
package UDPConnector;

import java.net.InetAddress;
import java.util.List;

/**
 * @author Jan Horjus
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public interface ConnectorInterface {

    @org.checkerframework.dataflow.qual.Impure
    public void SetPeerAddress( ConnectorInterface this,  InetAddress peerAddress,   int port);

    @org.checkerframework.dataflow.qual.Impure
    public  List<byte[]> Receive( ConnectorInterface this,   int maxBlockingTimeInMs);

    @org.checkerframework.dataflow.qual.Impure
    public   boolean Send( ConnectorInterface this,  String sendString) throws Exception;

    @org.checkerframework.dataflow.qual.Impure
    public   boolean Send( ConnectorInterface this,   byte  [] sendBuffer) throws Exception;

    public interface ReceiveNotifyInterface {

        @org.checkerframework.dataflow.qual.Impure
        public void Notify( ReceiveNotifyInterface this,  ConnectorInterface connection);
    }

    @org.checkerframework.dataflow.qual.Impure
    public   boolean AddReceiveNotify( ConnectorInterface this,  ReceiveNotifyInterface notifyMe);

    @org.checkerframework.dataflow.qual.Impure
    public void StartReceiveThread( ConnectorInterface this);

    @org.checkerframework.dataflow.qual.Impure
    public void StopReceiveThread( ConnectorInterface this);
}
