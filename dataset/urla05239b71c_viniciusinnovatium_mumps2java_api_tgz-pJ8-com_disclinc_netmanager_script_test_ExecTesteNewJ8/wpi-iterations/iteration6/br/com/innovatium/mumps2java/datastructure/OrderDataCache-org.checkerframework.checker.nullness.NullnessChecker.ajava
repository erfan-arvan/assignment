package br.com.innovatium.mumps2java.datastructure;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;
import static br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil.*;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class OrderDataCache {

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Set<String> cache = new HashSet<String>();

    @org.checkerframework.dataflow.qual.SideEffectFree
    public OrderDataCache() {
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isCached(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs) {
        int last = subs.length;
        Object[] subscripts = null;
        for (int i = last; i > 1; i--) {
            subscripts = Arrays.copyOf(subs, i);
            if (cache.contains(generateKeyOfParent(subscripts))) {
                return true;
            }
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void add(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] subs) {
        cache.add(generateKeyOfParent(subs));
    }
}
