package edu.iastate.cyctools.view.dialog;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JDialog;
import edu.iastate.cyctools.DefaultController;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SearchResultDialog extends JDialog implements ActionListener, PropertyChangeListener {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JOptionPane optionPane;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DefaultController controller;

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String btnString1 = "Enter";

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String btnString2 = "Cancel";

    @org.checkerframework.dataflow.qual.Impure
    public SearchResultDialog(JFrame aFrame, String searchTerm, DefaultController controller) {
        super(aFrame, true);
        this.controller = controller;
        optionPane = new JOptionPane();
        setContentPane(optionPane);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {

            @org.checkerframework.dataflow.qual.Impure
            public void windowClosing(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull WindowEvent we) {
                optionPane.setValue(new Integer(JOptionPane.CLOSED_OPTION));
            }
        });
        //Register an event handler that reacts to option pane state changes.
        optionPane.addPropertyChangeListener(this);
    }

    /**
     * This method reacts to state changes in the option pane.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void propertyChange(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SearchResultDialog this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull PropertyChangeEvent e) {
        String prop = e.getPropertyName();
        if (isVisible() && (e.getSource() == optionPane) && (JOptionPane.VALUE_PROPERTY.equals(prop) || JOptionPane.INPUT_VALUE_PROPERTY.equals(prop))) {
            Object value = optionPane.getValue();
            if (value == JOptionPane.UNINITIALIZED_VALUE) {
                //ignore reset
                return;
            }
            //Reset the JOptionPane's value.
            //If you don't do this, then if the user
            //presses the same button next time, no
            //property change event will be fired.
            optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
            if (btnString1.equals(value)) {
                JOptionPane.showMessageDialog(SearchResultDialog.this, "Sorry, \"\" isn't a valid response.\nPlease enter .", "Try again", JOptionPane.ERROR_MESSAGE);
            } else {
                clearAndHide();
            }
        }
    }

    /**
     * This method clears the dialog and hides it.
     */
    @org.checkerframework.dataflow.qual.Impure
    public void clearAndHide() {
        setVisible(false);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public void actionPerformed(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SearchResultDialog this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ActionEvent arg0) {
        // TODO Auto-generated method stub
    }
}
