memberSearchIndex = [{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"ageOf(K, TimeUnit)","url":"ageOf(K,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedRefresh","l":"ageOf(K, TimeUnit)","url":"ageOf(K,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"ageOf(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedRefresh","l":"ageOf(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"asMap()"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"asMap()"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCacheLoader","l":"asyncLoad(K, Executor)","url":"asyncLoad(K,java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"asyncLoad(K, Executor)","url":"asyncLoad(K,java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCacheLoader","l":"asyncLoadAll(Set<? extends K>, Executor)","url":"asyncLoadAll(java.util.Set,java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"asyncLoadAll(Set<? extends K>, Executor)","url":"asyncLoadAll(java.util.Set,java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCacheLoader","l":"asyncReload(K, V, Executor)","url":"asyncReload(K,V,java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"asyncReload(K, V, Executor)","url":"asyncReload(K,V,java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"averageLoadPenalty()"},{"p":"com.github.benmanes.caffeine.cache","c":"Weigher","l":"boundedWeigher(Weigher<K, V>)","url":"boundedWeigher(com.github.benmanes.caffeine.cache.Weigher)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"build()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"build(CacheLoader<? super K1, V1>)","url":"build(com.github.benmanes.caffeine.cache.CacheLoader)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"buildAsync()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"buildAsync(AsyncCacheLoader<? super K1, V1>)","url":"buildAsync(com.github.benmanes.caffeine.cache.AsyncCacheLoader)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"buildAsync(CacheLoader<? super K1, V1>)","url":"buildAsync(com.github.benmanes.caffeine.cache.CacheLoader)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCacheLoader","l":"bulk(BiFunction<? super Set<? extends K>, ? super Executor, ? extends CompletableFuture<? extends Map<? extends K, ? extends V>>>)","url":"bulk(java.util.function.BiFunction)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCacheLoader","l":"bulk(Function<? super Set<? extends K>, ? extends Map<? extends K, ? extends V>>)","url":"bulk(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"bulk(Function<? super Set<? extends K>, ? extends Map<? extends K, ? extends V>>)","url":"bulk(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"cleanUp()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"coldest(@org.checkerframework.checker.index.qual.NonNegative int)","url":"coldest(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"coldest(Function<Stream<Policy.CacheEntry<K, V>>, T>)","url":"coldest(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"coldestWeighted(@org.checkerframework.checker.index.qual.NonNegative long)","url":"coldestWeighted(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"COLLECTED"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"compute(K, BiFunction<? super K, ? super V, ? extends V>, Duration)","url":"compute(K,java.util.function.BiFunction,java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"ConcurrentStatsCounter()","url":"%3Cinit%3E()"},{"p":"com.github.benmanes.caffeine.cache","c":"Scheduler","l":"disabledScheduler()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"disabledStatsCounter()"},{"p":"com.github.benmanes.caffeine.cache","c":"Ticker","l":"disabledTicker()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"empty()"},{"p":"com.github.benmanes.caffeine.cache","c":"CaffeineSpec","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"equals(Object)","url":"equals(java.lang.Object)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"estimatedSize()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"eviction()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"evictionCount()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"evictionListener(RemovalListener<? super K1, ? super V1>)","url":"evictionListener(com.github.benmanes.caffeine.cache.RemovalListener)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"evictionWeight()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"executor(Executor)","url":"executor(java.util.concurrent.Executor)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"expireAfter(Expiry<? super K1, ? super V1>)","url":"expireAfter(com.github.benmanes.caffeine.cache.Expiry)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"expireAfterAccess()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"expireAfterAccess(@org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"expireAfterAccess(@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"expireAfterAccess(Duration)","url":"expireAfterAccess(java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"Expiry","l":"expireAfterCreate(K, V, long)","url":"expireAfterCreate(K,V,long)"},{"p":"com.github.benmanes.caffeine.cache","c":"Expiry","l":"expireAfterRead(K, V, long, @org.checkerframework.checker.index.qual.NonNegative long)","url":"expireAfterRead(K,V,long,@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache","c":"Expiry","l":"expireAfterUpdate(K, V, long, @org.checkerframework.checker.index.qual.NonNegative long)","url":"expireAfterUpdate(K,V,long,@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"expireAfterWrite()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"expireAfterWrite(@org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"expireAfterWrite(@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"expireAfterWrite(Duration)","url":"expireAfterWrite(java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"EXPIRED"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.CacheEntry","l":"expiresAfter()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.CacheEntry","l":"expiresAt()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"expireVariably()"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"EXPLICIT"},{"p":"com.github.benmanes.caffeine.cache","c":"Scheduler","l":"forScheduledExecutorService(ScheduledExecutorService)","url":"forScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"from(CaffeineSpec)","url":"from(com.github.benmanes.caffeine.cache.CaffeineSpec)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"from(String)","url":"from(java.lang.String)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"get(K, BiFunction<? super K, ? super Executor, ? extends CompletableFuture<? extends V>>)","url":"get(K,java.util.function.BiFunction)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"get(K, Function<? super K, ? extends V>)","url":"get(K,java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"get(K, Function<? super K, ? extends V>)","url":"get(K,java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncLoadingCache","l":"get(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"LoadingCache","l":"get(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"getAll(Iterable<? extends K>, BiFunction<? super Set<? extends K>, ? super Executor, ? extends CompletableFuture<? extends Map<? extends K, ? extends V>>>)","url":"getAll(java.lang.Iterable,java.util.function.BiFunction)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"getAll(Iterable<? extends K>, Function<? super Set<? extends K>, ? extends Map<? extends K, ? extends V>>)","url":"getAll(java.lang.Iterable,java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"getAll(Iterable<? extends K>, Function<? super Set<? extends K>, ? extends Map<? extends K, ? extends V>>)","url":"getAll(java.lang.Iterable,java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncLoadingCache","l":"getAll(Iterable<? extends K>)","url":"getAll(java.lang.Iterable)"},{"p":"com.github.benmanes.caffeine.cache","c":"LoadingCache","l":"getAll(Iterable<? extends K>)","url":"getAll(java.lang.Iterable)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"getAllPresent(Iterable<? extends K>)","url":"getAllPresent(java.lang.Iterable)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"getEntryIfPresentQuietly(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"getExpiresAfter()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"getExpiresAfter(K, TimeUnit)","url":"getExpiresAfter(K,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"getExpiresAfter(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"getExpiresAfter(TimeUnit)","url":"getExpiresAfter(java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"getIfPresent(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"getIfPresent(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"getIfPresentQuietly(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"getMaximum()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedRefresh","l":"getRefreshesAfter()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedRefresh","l":"getRefreshesAfter(TimeUnit)","url":"getRefreshesAfter(java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Scheduler","l":"guardedScheduler(Scheduler)","url":"guardedScheduler(com.github.benmanes.caffeine.cache.Scheduler)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"guardedStatsCounter(StatsCounter)","url":"guardedStatsCounter(com.github.benmanes.caffeine.cache.stats.StatsCounter)"},{"p":"com.github.benmanes.caffeine.cache","c":"CaffeineSpec","l":"hashCode()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"hashCode()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"hitCount()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"hitRate()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"hottest(@org.checkerframework.checker.index.qual.NonNegative int)","url":"hottest(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"hottest(Function<Stream<Policy.CacheEntry<K, V>>, T>)","url":"hottest(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"hottestWeighted(@org.checkerframework.checker.index.qual.NonNegative long)","url":"hottestWeighted(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"incrementBy(StatsCounter)","url":"incrementBy(com.github.benmanes.caffeine.cache.stats.StatsCounter)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"initialCapacity(@org.checkerframework.checker.index.qual.NonNegative int)","url":"initialCapacity(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Interner","l":"intern(E)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"invalidate(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"invalidateAll()"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"invalidateAll(Iterable<? extends K>)","url":"invalidateAll(java.lang.Iterable)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"isRecordingStats()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"isWeighted()"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"load(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"loadAll(Set<? extends K>)","url":"loadAll(java.util.Set)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"loadCount()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"loadFailureCount()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"loadFailureRate()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"loadSuccessCount()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"maximumSize(@org.checkerframework.checker.index.qual.NonNegative long)","url":"maximumSize(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"maximumWeight(@org.checkerframework.checker.index.qual.NonNegative long)","url":"maximumWeight(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"minus(CacheStats)","url":"minus(com.github.benmanes.caffeine.cache.stats.CacheStats)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"missCount()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"missRate()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"newBuilder()"},{"p":"com.github.benmanes.caffeine.cache","c":"Interner","l":"newStrongInterner()"},{"p":"com.github.benmanes.caffeine.cache","c":"Interner","l":"newWeakInterner()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"of(@org.checkerframework.checker.index.qual.NonNegative long, @org.checkerframework.checker.index.qual.NonNegative long, @org.checkerframework.checker.index.qual.NonNegative long, @org.checkerframework.checker.index.qual.NonNegative long, @org.checkerframework.checker.index.qual.NonNegative long, @org.checkerframework.checker.index.qual.NonNegative long, @org.checkerframework.checker.index.qual.NonNegative long)","url":"of(@org.checkerframework.checker.index.qual.NonNegativelong,@org.checkerframework.checker.index.qual.NonNegativelong,@org.checkerframework.checker.index.qual.NonNegativelong,@org.checkerframework.checker.index.qual.NonNegativelong,@org.checkerframework.checker.index.qual.NonNegativelong,@org.checkerframework.checker.index.qual.NonNegativelong,@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"oldest(@org.checkerframework.checker.index.qual.NonNegative int)","url":"oldest(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"oldest(@org.checkerframework.checker.index.qual.NonNegative int)","url":"oldest(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"oldest(Function<Stream<Policy.CacheEntry<K, V>>, T>)","url":"oldest(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"oldest(Function<Stream<Policy.CacheEntry<K, V>>, T>)","url":"oldest(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalListener","l":"onRemoval(K, V, RemovalCause)","url":"onRemoval(K,V,com.github.benmanes.caffeine.cache.RemovalCause)"},{"p":"com.github.benmanes.caffeine.cache","c":"CaffeineSpec","l":"parse(String)","url":"parse(java.lang.String)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"plus(CacheStats)","url":"plus(com.github.benmanes.caffeine.cache.stats.CacheStats)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"policy()"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"put(K, CompletableFuture<? extends V>)","url":"put(K,java.util.concurrent.CompletableFuture)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"put(K, V, @org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"put(K,V,@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"put(K, V, Duration)","url":"put(K,V,java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"put(K, V)","url":"put(K,V)"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"putAll(Map<? extends K, ? extends V>)","url":"putAll(java.util.Map)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"putIfAbsent(K, V, @org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"putIfAbsent(K,V,@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"putIfAbsent(K, V, Duration)","url":"putIfAbsent(K,V,java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"Ticker","l":"read()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"recordEviction(@org.checkerframework.checker.index.qual.NonNegative int, RemovalCause)","url":"recordEviction(@org.checkerframework.checker.index.qual.NonNegativeint,com.github.benmanes.caffeine.cache.RemovalCause)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"recordEviction(int, RemovalCause)","url":"recordEviction(int,com.github.benmanes.caffeine.cache.RemovalCause)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"recordHits(@org.checkerframework.checker.index.qual.NonNegative int)","url":"recordHits(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"recordHits(int)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"recordLoadFailure(@org.checkerframework.checker.index.qual.NonNegative long)","url":"recordLoadFailure(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"recordLoadFailure(long)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"recordLoadSuccess(@org.checkerframework.checker.index.qual.NonNegative long)","url":"recordLoadSuccess(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"recordLoadSuccess(long)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"recordMisses(@org.checkerframework.checker.index.qual.NonNegative int)","url":"recordMisses(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"recordMisses(int)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"recordStats()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"recordStats(Supplier<? extends StatsCounter>)","url":"recordStats(java.util.function.Supplier)"},{"p":"com.github.benmanes.caffeine.cache","c":"LoadingCache","l":"refresh(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.CacheEntry","l":"refreshableAfter()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.CacheEntry","l":"refreshableAt()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"refreshAfterWrite()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"refreshAfterWrite(@org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"refreshAfterWrite(@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"refreshAfterWrite(Duration)","url":"refreshAfterWrite(java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"LoadingCache","l":"refreshAll(Iterable<? extends K>)","url":"refreshAll(java.lang.Iterable)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy","l":"refreshes()"},{"p":"com.github.benmanes.caffeine.cache","c":"CacheLoader","l":"reload(K, V)","url":"reload(K,V)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"removalListener(RemovalListener<? super K1, ? super V1>)","url":"removalListener(com.github.benmanes.caffeine.cache.RemovalListener)"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"REPLACED"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"requestCount()"},{"p":"com.github.benmanes.caffeine.cache","c":"Scheduler","l":"schedule(Executor, Runnable, long, TimeUnit)","url":"schedule(java.util.concurrent.Executor,java.lang.Runnable,long,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"scheduler(Scheduler)","url":"scheduler(com.github.benmanes.caffeine.cache.Scheduler)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"setExpiresAfter(@org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"setExpiresAfter(@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"setExpiresAfter(Duration)","url":"setExpiresAfter(java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"setExpiresAfter(K, @org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"setExpiresAfter(K,@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"setExpiresAfter(K, Duration)","url":"setExpiresAfter(K,java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"setMaximum(@org.checkerframework.checker.index.qual.NonNegative long)","url":"setMaximum(@org.checkerframework.checker.index.qual.NonNegativelong)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedRefresh","l":"setRefreshesAfter(@org.checkerframework.checker.index.qual.NonNegative long, TimeUnit)","url":"setRefreshesAfter(@org.checkerframework.checker.index.qual.NonNegativelong,java.util.concurrent.TimeUnit)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedRefresh","l":"setRefreshesAfter(Duration)","url":"setRefreshesAfter(java.time.Duration)"},{"p":"com.github.benmanes.caffeine.cache","c":"Weigher","l":"singletonWeigher()"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"SIZE"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"snapshot()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"StatsCounter","l":"snapshot()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.CacheEntry","l":"snapshotAt()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"softValues()"},{"p":"com.github.benmanes.caffeine.cache","c":"Cache","l":"stats()"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncCache","l":"synchronous()"},{"p":"com.github.benmanes.caffeine.cache","c":"AsyncLoadingCache","l":"synchronous()"},{"p":"com.github.benmanes.caffeine.cache","c":"Scheduler","l":"systemScheduler()"},{"p":"com.github.benmanes.caffeine.cache","c":"Ticker","l":"systemTicker()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"ticker(Ticker)","url":"ticker(com.github.benmanes.caffeine.cache.Ticker)"},{"p":"com.github.benmanes.caffeine.cache","c":"CaffeineSpec","l":"toParsableString()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"toString()"},{"p":"com.github.benmanes.caffeine.cache","c":"CaffeineSpec","l":"toString()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"toString()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"ConcurrentStatsCounter","l":"toString()"},{"p":"com.github.benmanes.caffeine.cache.stats","c":"CacheStats","l":"totalLoadTime()"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"valueOf(String)","url":"valueOf(java.lang.String)"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"values()"},{"p":"com.github.benmanes.caffeine.cache","c":"RemovalCause","l":"wasEvicted()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"weakKeys()"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"weakValues()"},{"p":"com.github.benmanes.caffeine.cache","c":"Weigher","l":"weigh(K, V)","url":"weigh(K,V)"},{"p":"com.github.benmanes.caffeine.cache","c":"Caffeine","l":"weigher(Weigher<? super K1, ? super V1>)","url":"weigher(com.github.benmanes.caffeine.cache.Weigher)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.CacheEntry","l":"weight()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"weightedSize()"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.Eviction","l":"weightOf(K)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"youngest(@org.checkerframework.checker.index.qual.NonNegative int)","url":"youngest(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"youngest(@org.checkerframework.checker.index.qual.NonNegative int)","url":"youngest(@org.checkerframework.checker.index.qual.NonNegativeint)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.FixedExpiration","l":"youngest(Function<Stream<Policy.CacheEntry<K, V>>, T>)","url":"youngest(java.util.function.Function)"},{"p":"com.github.benmanes.caffeine.cache","c":"Policy.VarExpiration","l":"youngest(Function<Stream<Policy.CacheEntry<K, V>>, T>)","url":"youngest(java.util.function.Function)"}]