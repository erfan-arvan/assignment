package event;

import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.nio.channels.ServerSocketChannel;
import java.nio.channels.SelectionKey;

/**
 * This interface defines some interaction with the event loop
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public interface Callback {

    /**
     *  Default callback to handle loop errors.
     *  Provided to the loop in case you don't specify one when calling
     *  the constructor or using `setErrCB`
     */
    static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ErrorCallback DEFAULT_ERROR_CB = new DefaultErrorCallback();

    static class DefaultErrorCallback implements ErrorCallback {

        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DefaultErrorCallback this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Throwable t) {
            t.printStackTrace();
            System.exit(1);
        }

        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull DefaultErrorCallback this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String msg) {
            System.err.println(msg);
            Thread.currentThread().dumpStack();
            System.exit(1);
        }
    }

    /**
     *  Interface for any sort of error handling.
     */
    static interface ErrorCallback extends Callback {

        /**
         *  Functionality to handle Exceptions.
         */
        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Throwable t);

        /**
         *  Functionality to handle String based errors.
         */
        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String msg);
    }

    /**
     * default error handlers hand off handlings errors to the loop,
     * this may not be what you want, as the loop's default error
     * handlers shut down the vm.
     *
     * This is a base implementation to avoid having to type boilerplate,
     * but almost certainly not what you want in productive systems.
     */
    static abstract class ErrorCallbackBase implements ErrorCallback {

        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ErrorCallbackBase this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Throwable t) {
            l.onError(t);
        }

        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ErrorCallbackBase this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Loop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String msg) {
            l.onError(msg);
        }
    }

    /**
     * Basic implementation of the callbacks that need to be handled
     * when implementing a TCP client
     */
    static abstract class TCPClient extends ErrorCallbackBase {

        /**
         * Functionality to be executed with a connection is established on this
         * client,  default impl is noop, you may want to override this to do
         * initialization
         */
        @org.checkerframework.dataflow.qual.Impure
        public void onConnect(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c) {
        }

        /**
         *  Functionality that is to be executed when the data is received
         *  by this client.
         */
        @org.checkerframework.dataflow.qual.Impure
        public abstract void onData(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer buf);

        /**
         * Functionality to be executed when the client connection is closed.
         * default impl is noop, you may want to override this to do
         * cleanup
         */
        @org.checkerframework.dataflow.qual.Impure
        public void onClose(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c) {
        }

        /**
         * Functionality to be executed when the communication partner closes
         * the socket. This doesn't necessarily mean we are no longer able to
         * write to the socket.
         */
        @org.checkerframework.dataflow.qual.Impure
        public void onEOF(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c) {
        }

        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Throwable t) {
            this.onError(l, t);
        }

        /**
         * Very fine grained feedback to keep track of precisely which data
         * has actually been written to the network.
         * @param c channel the data was written to
         * @param b buffer from which data was written
         * @param pos initial position in buffer (where the data written started)
         * @param num number of bytes written
         */
        @org.checkerframework.dataflow.qual.Impure
        public void onWrite(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPClientLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel c, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ByteBuffer b,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int pos,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int num) {
        }
    }

    static abstract class TCPServer extends ErrorCallbackBase {

        // useful ? prbly not. currently noop, override in order to ???
        // may disappear
        @org.checkerframework.dataflow.qual.Impure
        public void onConnect(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPServerLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ServerSocketChannel ssc) {
        }

        /**
         * called whenever a new connection is accepted.
         */
        @org.checkerframework.dataflow.qual.Impure
        public abstract void onAccept(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPServerLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ServerSocketChannel ssc, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SocketChannel sc);

        //
        // perhaps onShutdown ?
        // default impl is noop, override for cleanup
        @org.checkerframework.dataflow.qual.SideEffectFree
        public void onClose(TCPServerLoop l, ServerSocketChannel ssc) {
        }

        @org.checkerframework.dataflow.qual.Impure
        public void onError(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TCPServerLoop l, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ServerSocketChannel ssc, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Throwable t) {
            this.onError(l, t);
        }
    }

    /**
     * Used to insert functions into the Loop. The
     * functionality implemented in the `go` method
     * is executed as soon as possible after the
     * timeout period provided to `setTimeout` has expired.
     *
     * see `TimeoutLoop.addTimeout`
     */
    public abstract class Timeout extends ErrorCallbackBase {

        @org.checkerframework.dataflow.qual.Impure
        public Timeout() {
        }

        /**
         * Functionality to be executed by this timeout.
         */
        @org.checkerframework.dataflow.qual.Impure
        public abstract void go(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull TimeoutLoop l) throws Throwable;
    }
}
