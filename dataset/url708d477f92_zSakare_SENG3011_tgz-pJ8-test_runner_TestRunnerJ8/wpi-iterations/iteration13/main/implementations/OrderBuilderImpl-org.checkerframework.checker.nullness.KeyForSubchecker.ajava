package main.implementations;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import main.implementations.order.Order;
import main.interfaces.OrderBuilder;
import main.parser.SircaOrder;

/**
 * Order helper class to build orders based on given parameters and parsed orders from csv files.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class OrderBuilderImpl implements OrderBuilder {

    private  String security;

    private  Date dateTime;

    private  String recordType;

    private   double price;

    private   int volume;

    private   int undisclosedVolume;

    private   double value;

    private  String qualifiers;

    private  String transactionId;

    private  String bidId;

    private  String askId;

    private   boolean isBid;

    private  Date entryTime;

    private   double oldPrice;

    private   int oldVolume;

    private  String buyerBrokerId;

    private  String sellerBrokerId;

    @org.checkerframework.dataflow.qual.Impure
    public OrderBuilderImpl( String security,  Date date,   double price,  String volume,  String isBid,  String brokerId) {
        setSecurity(security);
        setBid(isBid);
        if (("B").equals(isBid)) {
            setBuyerBrokerId(brokerId);
            setSellerBrokerId(DEFAULT_SELLER_BROKER_ID);
        } else {
            setSellerBrokerId(brokerId);
            setBuyerBrokerId(DEFAULT_BUYER_BROKER_ID);
        }
        setDateTime(date);
        setPrice(price);
        setVolume(volume);
        setValue(this.price * this.volume);
        setRecordType(DEFAULT_RECORD_TYPE);
        setBidId(DEFAULT_BIDID);
        setAskId(DEFAULT_ASKID);
        setEntryTime(DEFAULT_ENTRY_TIME);
        setOldPrice(DEFAULT_OLD_PRICE);
        setOldVolume(DEFAULT_OLD_VOLUME);
        setUndisclosedVolume(DEFAULT_UNDISCLOSED_VOLUME);
        setQualifiers(DEFAULT_QUALIFIERS);
    }

    @org.checkerframework.dataflow.qual.Impure
    public OrderBuilderImpl(SircaOrder order) {
        setSecurity(order.getInstrument());
        setBid(order.getBidOrAsk());
        setBuyerBrokerId(order.getBuyerBrokerId());
        setSellerBrokerId(order.getSellerBrokerId());
        setDateTime(order.getDate(), order.getTime());
        if (!order.getPrice().isEmpty()) {
            setPrice(order.getPrice());
        } else {
            setPrice(DEFAULT_PRICE);
        }
        if (!order.getVolume().isEmpty()) {
            setVolume(order.getVolume());
        } else {
            setVolume(DEFAULT_VOLUME);
        }
        setRecordType(order.getRecordType());
        setUndisclosedVolume(DEFAULT_UNDISCLOSED_VOLUME);
        setQualifiers(order.getQualifiers());
        setTransactionId(order.getTransactionId());
        setBidId(order.getBidId());
        setAskId(order.getAskId());
        setEntryTime(DEFAULT_ENTRY_TIME);
        setOldPrice(DEFAULT_OLD_PRICE);
        setOldVolume(DEFAULT_OLD_VOLUME);
        setValue(this.price * this.volume);
    }

    @org.checkerframework.dataflow.qual.Impure
    public OrderBuilderImpl(String security, Date date, double price, String volume, String brokerID) {
        setSecurity(security);
        setDateTime(date);
        setPrice(price);
        setVolume(volume);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  Order build( OrderBuilderImpl this) {
        return new Order(security, dateTime, recordType, price, volume, undisclosedVolume, value, qualifiers, transactionId, bidId, askId, isBid, entryTime, oldPrice, oldVolume, buyerBrokerId, sellerBrokerId);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setSecurity( OrderBuilderImpl this,  String security) {
        this.security = security;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setBuyerBrokerId( OrderBuilderImpl this,  String brokerId) {
        this.buyerBrokerId = brokerId;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setSellerBrokerId( OrderBuilderImpl this,  String brokerId) {
        this.sellerBrokerId = brokerId;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setDateTime( OrderBuilderImpl this,  String date,  String time) {
        // Date and time format provided is 2013020500:00:00.000
        SimpleDateFormat sicraOrderDateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss.SSS");
        // Combine the date and time strings.
        String dateTime = date + time;
        try {
            // Save the newly created date object.
            this.dateTime = sicraOrderDateFormat.parse(dateTime);
        } catch (ParseException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setPrice( OrderBuilderImpl this,  String price) {
        this.price = Double.parseDouble(price);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setBid( OrderBuilderImpl this,  String bidOrAsk) {
        if (("A").equals(bidOrAsk)) {
            this.isBid = false;
        } else if (("B").equals(bidOrAsk)) {
            this.isBid = true;
        }
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setVolume( OrderBuilderImpl this,  String volume) {
        this.volume = Integer.parseInt(volume);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setDateTime( OrderBuilderImpl this,  Date dateTime) {
        this.dateTime = dateTime;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setRecordType( OrderBuilderImpl this,  String recordType) {
        this.recordType = recordType;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setPrice( OrderBuilderImpl this,   double price) {
        this.price = price;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setVolume( OrderBuilderImpl this,   int volume) {
        this.volume = volume;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setUndisclosedVolume( OrderBuilderImpl this,  String undisclosedVolume) {
        this.undisclosedVolume = Integer.parseInt(undisclosedVolume);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setValue( OrderBuilderImpl this,   double value) {
        this.value = value;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setQualifiers( OrderBuilderImpl this,  String qualifiers) {
        this.qualifiers = qualifiers;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setTransactionId( OrderBuilderImpl this,  String transactionId) {
        this.transactionId = transactionId;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setBidId( OrderBuilderImpl this,  String bidId) {
        this.bidId = bidId;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setAskId( OrderBuilderImpl this,  String askId) {
        this.askId = askId;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setBid(boolean isBid) {
        this.isBid = isBid;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setEntryTime( OrderBuilderImpl this,  Date entryTime) {
        this.entryTime = entryTime;
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setOldPrice( OrderBuilderImpl this,  String oldPrice) {
        this.oldPrice = Double.parseDouble(oldPrice);
    }

    @org.checkerframework.dataflow.qual.Impure
    public void setOldVolume( OrderBuilderImpl this,  String oldVolume) {
        this.oldVolume = Integer.parseInt(oldVolume);
    }
}
