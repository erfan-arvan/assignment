package mLibrary;

import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class ListObject {

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull List<Object> list = new LinkedList<Object>();

    @org.checkerframework.dataflow.qual.SideEffectFree
    private ListObject() {
    }

    @org.checkerframework.dataflow.qual.Pure
    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ListObject getInstance() {
        return new ListObject();
    }

    @org.checkerframework.dataflow.qual.Impure
    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ListObject concat(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ListObject@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... lists) {
        ListObject l = new ListObject();
        if (lists != null && lists.length > 0) {
            for (ListObject listObject : lists) {
                l.list.addAll(listObject.list);
            }
        }
        return l;
    }

    @org.checkerframework.dataflow.qual.Impure
    static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ListObject add(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... elements) {
        ListObject l = new ListObject();
        l.list.addAll(Arrays.asList(elements));
        return l;
    }

    @org.checkerframework.dataflow.qual.Impure
    static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int find(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object listObj, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object obj) {
        if (listObj instanceof ListObject) {
            List<Object> list = ((ListObject) listObj).list;
            for (int i = 0; i < list.size(); i++) {
                Object item = list.get(i);
                item = mFncUtil.toString(item);
                obj = mFncUtil.toString(obj);
                if (item.equals(obj)) {
                    return i;
                }
            }
        }
        return 0;
    }

    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int find(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object obj) {
        return find(this, obj);
    }

    @org.checkerframework.dataflow.qual.Impure
    @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ListObject sublist( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int init,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int end) {
        final ListObject l = new ListObject();
        if (init < 0) {
            init = 0;
        }
        if (end > this.list.size()) {
            end = this.list.size();
        }
        if (init > end) {
            init = end;
        }
        l.list.addAll(this.list.subList(init, end));
        return l;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object element( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int position) {
        if (position <= 0) {
            position = 0;
        } else {
            position = position - 1;
        }
        return this.list.get(position);
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object firstElement() {
        return element(1);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length() {
        return list.size();
    }

    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String toString(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ListObject this) {
        int lastDelimiter = list.size() - 1;
        int count = 0;
        StringBuilder string = new StringBuilder();
        for (Object o : list) {
            string.append(o);
            if (count < lastDelimiter) {
                string.append(DataStructureUtil.DELIMITER);
            }
            count++;
        }
        return string.toString();
    }
}
