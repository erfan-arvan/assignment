package edu.iastate.cyctools.tools.load.model;

import java.util.ArrayList;
import edu.iastate.javacyco.Frame;
import edu.iastate.javacyco.JavacycConnection;
import edu.iastate.javacyco.PtoolsErrorException;

//	@Override
//	public boolean modifiesKB(JavacycConnection conn) throws PtoolsErrorException {
//		Frame frame = Frame.load(conn, frameID);
//		frame.update();
//
//		Frame frameToModify = frame.copy(frame.getLocalID());
//		commitLocal(frameToModify);
//		boolean isModified = !frame.equalBySlotValues(frameToModify); // If the frames are not equal, a change has been made to the database.
//		return isModified;
//	}
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class SlotUpdate extends AbstractFrameDataEdit {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String slotLabel;

    private @org.checkerframework.checker.initialization.qual.UnknownInitialization(java.lang.Object.class) @org.checkerframework.checker.nullness.qual.MonotonicNonNull ArrayList<String> slotValues;

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.slotValues" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.slotValues" }, qualifier = org.checkerframework.checker.initialization.qual.Initialized.class)
    @org.checkerframework.dataflow.qual.Impure
    public SlotUpdate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String frameID, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String slotLabel, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String slotValue,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean append,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean ignoreDuplicates,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] associatedRows) {
        ArrayList<String> slotValues = new ArrayList<String>();
        slotValues.add(slotValue);
        this.frameID = frameID;
        this.slotLabel = slotLabel;
        this.slotValues = slotValues;
        this.append = append;
        this.ignoreDuplicates = ignoreDuplicates;
        this.associatedRows = associatedRows;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.slotValues" })
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.slotValues" }, qualifier = org.checkerframework.checker.initialization.qual.Initialized.class)
    @org.checkerframework.dataflow.qual.Impure
    public SlotUpdate(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String frameID, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String slotLabel, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayList<String> slotValues,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean append,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean ignoreDuplicates,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] associatedRows) {
        this.frameID = frameID;
        this.slotLabel = slotLabel;
        this.slotValues = slotValues;
        this.append = append;
        this.ignoreDuplicates = ignoreDuplicates;
        this.associatedRows = associatedRows;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.slotValues" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String getSlotLabel() {
        return slotLabel;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.slotValues" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean commit(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SlotUpdate this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable JavacycConnection conn) {
        Frame frame = null;
        try {
            if (!conn.frameExists(frameID)) {
                return false;
            }
            frame = this.getFrame(conn);
        } catch (PtoolsErrorException e1) {
            System.out.println("not sure how you would reach this");
            return false;
        }
        // GO-TERMS are a special case, as pathway tools can automatically import information for them if told to do so.
        if (slotLabel.equalsIgnoreCase("GO-TERMS")) {
            try {
                conn.importGOTerms(getValues());
            } catch (PtoolsErrorException e) {
                System.out.println("here we have a problem importing a GO-term.  Perhaps this term doesn't exist?");
                return false;
            }
        }
        ArrayList<String> newValues = new ArrayList<String>();
        if (append) {
            try {
                newValues.addAll(frame.getSlotValues(slotLabel));
            } catch (PtoolsErrorException e) {
                System.out.println("not sure what to make of this.  The slot doesn't exist? bad data format?");
                return false;
            }
        }
        if (ignoreDuplicates) {
            for (String value : slotValues) {
                if (!newValues.contains(value))
                    newValues.add(value);
            }
        } else
            newValues.addAll(slotValues);
        frame.putSlotValues(slotLabel, newValues);
        try {
            frame.commit();
        } catch (PtoolsErrorException e) {
            System.out.println("error during commit, recommend a rollback");
            return false;
        }
        return true;
    }

    // Catches all "special" cases for slot updates, such as GO-TERMS
    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.slotValues" })
    @org.checkerframework.dataflow.qual.Impure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Frame commitLocal(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SlotUpdate this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.Nullable Frame frame) throws PtoolsErrorException {
        //		// GO-TERMS are a special case, as pathway tools can automatically import information for them if told to do so.
        //		if (slotLabel.equalsIgnoreCase("GO-TERMS")) {
        //			conn.importGOTerms(getValues());
        //		}
        ArrayList<String> newValues = new ArrayList<String>();
        if (append && frame.hasSlot(slotLabel)) {
            //TODO what if the slot value is actually an array?
            newValues.addAll(frame.getSlotValues(slotLabel));
        }
        if (ignoreDuplicates) {
            for (String value : slotValues) {
                if (!newValues.contains(value))
                    newValues.add(value);
            }
        } else
            newValues.addAll(slotValues);
        frame.putSlotValues(slotLabel, newValues);
        return frame;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.slotValues" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.UnknownInitialization(java.lang.Object.class) @org.checkerframework.checker.nullness.qual.Nullable ArrayList<String> getValues(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SlotUpdate this) {
        return slotValues;
    }

    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.slotValues" }, qualifier = org.checkerframework.checker.nullness.qual.Nullable.class)
    @org.checkerframework.dataflow.qual.Impure
    protected @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ArrayList<String> getRemoteValues(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SlotUpdate this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JavacycConnection conn) throws PtoolsErrorException {
        return (ArrayList<String>) conn.getSlotValues(frameID, slotLabel);
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.slotValues" })
    @org.checkerframework.dataflow.qual.Impure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean modifiesFrame(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SlotUpdate this, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull JavacycConnection conn, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Frame aFrame) throws PtoolsErrorException {
        Frame frameToModify = aFrame.copy(aFrame.getLocalID());
        commitLocal(frameToModify);
        // If the frames are not equal, a change has been made to the database.
        boolean isModified = !aFrame.equalBySlotValues(frameToModify);
        return isModified;
    }

    @org.checkerframework.checker.nullness.qual.EnsuresNonNull({ "this.slotValues" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String toString(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull SlotUpdate this) {
        //TODO don't really expect this toString to work, right?
        return "updating slot: " + slotLabel + " on frame: " + frameID + " with the values: " + slotValues.toString();
    }
}
