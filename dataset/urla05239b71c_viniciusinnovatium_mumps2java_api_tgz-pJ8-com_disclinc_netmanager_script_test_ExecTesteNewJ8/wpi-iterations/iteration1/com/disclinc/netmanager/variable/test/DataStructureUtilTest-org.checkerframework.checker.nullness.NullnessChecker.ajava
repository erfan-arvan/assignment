package com.disclinc.netmanager.variable.test;

import java.util.Arrays;
import junit.framework.Assert;
import org.junit.Test;
import br.com.innovatium.mumps2java.datastructure.util.DataStructureUtil;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class DataStructureUtilTest {

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] start = new Object[] { 1, 2, 3, 4 };

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] end = new Object[] { 5, 6, 7, 8, 9, 0 };

    private @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] query = new Object[] { "^www001", "x", "1", "2", "3" };

    @org.checkerframework.dataflow.qual.Impure
    public void testConcat() {
        Object[] concat = DataStructureUtil.concat(start, end);
        Object[] result = new Object[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
        Assert.assertTrue("All elements must have the same value", Arrays.equals(result, concat));
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testConcatLastElement() {
        Object[] concat = DataStructureUtil.concat(start, 88);
        Object[] result = new Object[] { 1, 2, 3, 4, 88 };
        Assert.assertTrue("All elements must have the same value", Arrays.equals(result, concat));
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testConcatSinceLastElement() {
        Object[] concat = DataStructureUtil.concatSinceLast(start, end);
        Object[] result = new Object[] { 1, 2, 3, 5, 6, 7, 8, 9, 0 };
        Assert.assertTrue("All elements must have the same value", Arrays.equals(result, concat));
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testGenerateKeyOfTheSubscripts() {
        Assert.assertEquals("^www001~x~1~2~3", DataStructureUtil.generateKey(query));
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testGenerateKeyOfParentSubscripts() {
        Assert.assertEquals("^www001~x~1~2", DataStructureUtil.generateKeyOfParent(query));
    }

    @org.checkerframework.dataflow.qual.Impure
    public void testGenerateKeyToLikeQuery() {
        Assert.assertEquals("x~1~2~", DataStructureUtil.generateKeyToLikeQuery(query));
    }
}
